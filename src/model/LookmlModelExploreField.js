/**
 * Looker API 3.1 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  This **API 3.1** is in active development. This is where support for new Looker features will appear as non-breaking additions - new functions, new optional parameters on existing functions, or new optional properties in existing types. Additive changes should not impact your existing application code that calls the Looker API. Your existing application code will not be aware of any new Looker API functionality until you choose to upgrade your app to use a newer Looker API client SDK release.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.   ### Examples of new things added in API 3.1:  * Dashboard construction APIs * Themes and custom color collections APIs * Create and run SQL_runner queries * Create and run merged results queries * Create and modify dashboard filters * Create and modify password requirements   ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.   ### Semantic changes in API 3.1:  * `all_looks` no longer includes soft-deleted looks, matching `all_dashboards` behavior. You can find soft-deleted looks using `search_looks` with the `deleted` param set to True. * `all_spaces` no longer includes duplicate items * `search_users` no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, `render_task_results` now returns HTTP status ***202 Accepted*** instead of HTTP status ***102 Processing*** * `all_running_queries` and `kill_query` functions have moved into the `Query` function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.  
 *
 * OpenAPI spec version: 3.1.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LookmlModelExploreFieldEnumeration', 'model/LookmlModelExploreFieldMapLayer', 'model/LookmlModelExploreFieldSqlCase', 'model/LookmlModelExploreFieldTimeInterval'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./LookmlModelExploreFieldEnumeration'), require('./LookmlModelExploreFieldMapLayer'), require('./LookmlModelExploreFieldSqlCase'), require('./LookmlModelExploreFieldTimeInterval'));
  } else {
    // Browser globals (root is window)
    if (!root.LookerApi31Reference) {
      root.LookerApi31Reference = {};
    }
    root.LookerApi31Reference.LookmlModelExploreField = factory(root.LookerApi31Reference.ApiClient, root.LookerApi31Reference.LookmlModelExploreFieldEnumeration, root.LookerApi31Reference.LookmlModelExploreFieldMapLayer, root.LookerApi31Reference.LookmlModelExploreFieldSqlCase, root.LookerApi31Reference.LookmlModelExploreFieldTimeInterval);
  }
}(this, function(ApiClient, LookmlModelExploreFieldEnumeration, LookmlModelExploreFieldMapLayer, LookmlModelExploreFieldSqlCase, LookmlModelExploreFieldTimeInterval) {
  'use strict';




  /**
   * The LookmlModelExploreField model module.
   * @module model/LookmlModelExploreField
   * @version 3.1.0
   */

  /**
   * Constructs a new <code>LookmlModelExploreField</code>.
   * @alias module:model/LookmlModelExploreField
   * @class
   */
  var exports = function() {
    var _this = this;



















































  };

  /**
   * Constructs a <code>LookmlModelExploreField</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/LookmlModelExploreField} obj Optional instance to populate.
   * @return {module:model/LookmlModelExploreField} The populated <code>LookmlModelExploreField</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('align')) {
        obj['align'] = ApiClient.convertToType(data['align'], 'String');
      }
      if (data.hasOwnProperty('can_filter')) {
        obj['can_filter'] = ApiClient.convertToType(data['can_filter'], 'Boolean');
      }
      if (data.hasOwnProperty('category')) {
        obj['category'] = ApiClient.convertToType(data['category'], 'String');
      }
      if (data.hasOwnProperty('default_filter_value')) {
        obj['default_filter_value'] = ApiClient.convertToType(data['default_filter_value'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('enumerations')) {
        obj['enumerations'] = ApiClient.convertToType(data['enumerations'], [LookmlModelExploreFieldEnumeration]);
      }
      if (data.hasOwnProperty('error')) {
        obj['error'] = ApiClient.convertToType(data['error'], 'String');
      }
      if (data.hasOwnProperty('field_group_label')) {
        obj['field_group_label'] = ApiClient.convertToType(data['field_group_label'], 'String');
      }
      if (data.hasOwnProperty('field_group_variant')) {
        obj['field_group_variant'] = ApiClient.convertToType(data['field_group_variant'], 'String');
      }
      if (data.hasOwnProperty('fill_style')) {
        obj['fill_style'] = ApiClient.convertToType(data['fill_style'], 'String');
      }
      if (data.hasOwnProperty('fiscal_month_offset')) {
        obj['fiscal_month_offset'] = ApiClient.convertToType(data['fiscal_month_offset'], 'Number');
      }
      if (data.hasOwnProperty('has_allowed_values')) {
        obj['has_allowed_values'] = ApiClient.convertToType(data['has_allowed_values'], 'Boolean');
      }
      if (data.hasOwnProperty('hidden')) {
        obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
      }
      if (data.hasOwnProperty('is_filter')) {
        obj['is_filter'] = ApiClient.convertToType(data['is_filter'], 'Boolean');
      }
      if (data.hasOwnProperty('is_fiscal')) {
        obj['is_fiscal'] = ApiClient.convertToType(data['is_fiscal'], 'Boolean');
      }
      if (data.hasOwnProperty('is_numeric')) {
        obj['is_numeric'] = ApiClient.convertToType(data['is_numeric'], 'Boolean');
      }
      if (data.hasOwnProperty('is_timeframe')) {
        obj['is_timeframe'] = ApiClient.convertToType(data['is_timeframe'], 'Boolean');
      }
      if (data.hasOwnProperty('can_time_filter')) {
        obj['can_time_filter'] = ApiClient.convertToType(data['can_time_filter'], 'Boolean');
      }
      if (data.hasOwnProperty('time_interval')) {
        obj['time_interval'] = LookmlModelExploreFieldTimeInterval.constructFromObject(data['time_interval']);
      }
      if (data.hasOwnProperty('label')) {
        obj['label'] = ApiClient.convertToType(data['label'], 'String');
      }
      if (data.hasOwnProperty('label_from_parameter')) {
        obj['label_from_parameter'] = ApiClient.convertToType(data['label_from_parameter'], 'String');
      }
      if (data.hasOwnProperty('label_short')) {
        obj['label_short'] = ApiClient.convertToType(data['label_short'], 'String');
      }
      if (data.hasOwnProperty('lookml_link')) {
        obj['lookml_link'] = ApiClient.convertToType(data['lookml_link'], 'String');
      }
      if (data.hasOwnProperty('map_layer')) {
        obj['map_layer'] = LookmlModelExploreFieldMapLayer.constructFromObject(data['map_layer']);
      }
      if (data.hasOwnProperty('measure')) {
        obj['measure'] = ApiClient.convertToType(data['measure'], 'Boolean');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('strict_value_format')) {
        obj['strict_value_format'] = ApiClient.convertToType(data['strict_value_format'], 'Boolean');
      }
      if (data.hasOwnProperty('parameter')) {
        obj['parameter'] = ApiClient.convertToType(data['parameter'], 'Boolean');
      }
      if (data.hasOwnProperty('permanent')) {
        obj['permanent'] = ApiClient.convertToType(data['permanent'], 'Boolean');
      }
      if (data.hasOwnProperty('primary_key')) {
        obj['primary_key'] = ApiClient.convertToType(data['primary_key'], 'Boolean');
      }
      if (data.hasOwnProperty('project_name')) {
        obj['project_name'] = ApiClient.convertToType(data['project_name'], 'String');
      }
      if (data.hasOwnProperty('requires_refresh_on_sort')) {
        obj['requires_refresh_on_sort'] = ApiClient.convertToType(data['requires_refresh_on_sort'], 'Boolean');
      }
      if (data.hasOwnProperty('scope')) {
        obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
      }
      if (data.hasOwnProperty('sortable')) {
        obj['sortable'] = ApiClient.convertToType(data['sortable'], 'Boolean');
      }
      if (data.hasOwnProperty('source_file')) {
        obj['source_file'] = ApiClient.convertToType(data['source_file'], 'String');
      }
      if (data.hasOwnProperty('source_file_path')) {
        obj['source_file_path'] = ApiClient.convertToType(data['source_file_path'], 'String');
      }
      if (data.hasOwnProperty('sql')) {
        obj['sql'] = ApiClient.convertToType(data['sql'], 'String');
      }
      if (data.hasOwnProperty('sql_case')) {
        obj['sql_case'] = ApiClient.convertToType(data['sql_case'], [LookmlModelExploreFieldSqlCase]);
      }
      if (data.hasOwnProperty('suggest_dimension')) {
        obj['suggest_dimension'] = ApiClient.convertToType(data['suggest_dimension'], 'String');
      }
      if (data.hasOwnProperty('suggest_explore')) {
        obj['suggest_explore'] = ApiClient.convertToType(data['suggest_explore'], 'String');
      }
      if (data.hasOwnProperty('suggestable')) {
        obj['suggestable'] = ApiClient.convertToType(data['suggestable'], 'Boolean');
      }
      if (data.hasOwnProperty('suggestions')) {
        obj['suggestions'] = ApiClient.convertToType(data['suggestions'], ['String']);
      }
      if (data.hasOwnProperty('tags')) {
        obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('user_attribute_filter_types')) {
        obj['user_attribute_filter_types'] = ApiClient.convertToType(data['user_attribute_filter_types'], ['String']);
      }
      if (data.hasOwnProperty('value_format')) {
        obj['value_format'] = ApiClient.convertToType(data['value_format'], 'String');
      }
      if (data.hasOwnProperty('view')) {
        obj['view'] = ApiClient.convertToType(data['view'], 'String');
      }
      if (data.hasOwnProperty('view_label')) {
        obj['view_label'] = ApiClient.convertToType(data['view_label'], 'String');
      }
      if (data.hasOwnProperty('dynamic')) {
        obj['dynamic'] = ApiClient.convertToType(data['dynamic'], 'Boolean');
      }
      if (data.hasOwnProperty('week_start_day')) {
        obj['week_start_day'] = ApiClient.convertToType(data['week_start_day'], 'String');
      }
    }
    return obj;
  }

  /**
   * The appropriate horizontal text alignment the values of this field shoud be displayed in. Valid values are: \"left\", \"right\".
   * @member {String} align
   */
  exports.prototype['align'] = undefined;
  /**
   * Whether it's possible to filter on this field.
   * @member {Boolean} can_filter
   */
  exports.prototype['can_filter'] = undefined;
  /**
   * Field category Valid values are: \"parameter\", \"filter\", \"measure\", \"dimension\".
   * @member {String} category
   */
  exports.prototype['category'] = undefined;
  /**
   * The default value that this field uses when filtering. Null if there is no default value.
   * @member {String} default_filter_value
   */
  exports.prototype['default_filter_value'] = undefined;
  /**
   * Description
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * An array enumerating all the possible values that this field can contain. When null, there is no limit to the set of possible values this field can contain.
   * @member {Array.<module:model/LookmlModelExploreFieldEnumeration>} enumerations
   */
  exports.prototype['enumerations'] = undefined;
  /**
   * An error message indicating a problem with the definition of this field. If there are no errors, this will be null.
   * @member {String} error
   */
  exports.prototype['error'] = undefined;
  /**
   * A label creating a grouping of fields. All fields with this label should be presented together when displayed in a UI.
   * @member {String} field_group_label
   */
  exports.prototype['field_group_label'] = undefined;
  /**
   * When presented in a field group via field_group_label, a shorter name of the field to be displayed in that context.
   * @member {String} field_group_variant
   */
  exports.prototype['field_group_variant'] = undefined;
  /**
   * The style of dimension fill that is possible for this field. Null if no dimension fill is possible. Valid values are: \"enumeration\", \"range\".
   * @member {String} fill_style
   */
  exports.prototype['fill_style'] = undefined;
  /**
   * An offset (in months) from the calendar start month to the fiscal start month defined in the LookML model this field belongs to.
   * @member {Number} fiscal_month_offset
   */
  exports.prototype['fiscal_month_offset'] = undefined;
  /**
   * Whether this field has a set of allowed_values specified in LookML.
   * @member {Boolean} has_allowed_values
   */
  exports.prototype['has_allowed_values'] = undefined;
  /**
   * Whether this field should be hidden from the user interface.
   * @member {Boolean} hidden
   */
  exports.prototype['hidden'] = undefined;
  /**
   * Whether this field is a filter.
   * @member {Boolean} is_filter
   */
  exports.prototype['is_filter'] = undefined;
  /**
   * Whether this field represents a fiscal time value.
   * @member {Boolean} is_fiscal
   */
  exports.prototype['is_fiscal'] = undefined;
  /**
   * Whether this field is of a type that represents a numeric value.
   * @member {Boolean} is_numeric
   */
  exports.prototype['is_numeric'] = undefined;
  /**
   * Whether this field is of a type that represents a time value.
   * @member {Boolean} is_timeframe
   */
  exports.prototype['is_timeframe'] = undefined;
  /**
   * Whether this field can be time filtered.
   * @member {Boolean} can_time_filter
   */
  exports.prototype['can_time_filter'] = undefined;
  /**
   * Details on the time interval this field represents, if it is_timeframe.
   * @member {module:model/LookmlModelExploreFieldTimeInterval} time_interval
   */
  exports.prototype['time_interval'] = undefined;
  /**
   * Fully-qualified human-readable label of the field.
   * @member {String} label
   */
  exports.prototype['label'] = undefined;
  /**
   * The name of the parameter that will provide a parameterized label for this field, if available in the current context.
   * @member {String} label_from_parameter
   */
  exports.prototype['label_from_parameter'] = undefined;
  /**
   * The human-readable label of the field, without the view label.
   * @member {String} label_short
   */
  exports.prototype['label_short'] = undefined;
  /**
   * A URL linking to the definition of this field in the LookML IDE.
   * @member {String} lookml_link
   */
  exports.prototype['lookml_link'] = undefined;
  /**
   * If applicable, a map layer this field is associated with.
   * @member {module:model/LookmlModelExploreFieldMapLayer} map_layer
   */
  exports.prototype['map_layer'] = undefined;
  /**
   * Whether this field is a measure.
   * @member {Boolean} measure
   */
  exports.prototype['measure'] = undefined;
  /**
   * Fully-qualified name of the field.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * If yes, the field will not be localized with the user attribute number_format. Defaults to no
   * @member {Boolean} strict_value_format
   */
  exports.prototype['strict_value_format'] = undefined;
  /**
   * Whether this field is a parameter.
   * @member {Boolean} parameter
   */
  exports.prototype['parameter'] = undefined;
  /**
   * Whether this field can be removed from a query.
   * @member {Boolean} permanent
   */
  exports.prototype['permanent'] = undefined;
  /**
   * Whether or not the field represents a primary key.
   * @member {Boolean} primary_key
   */
  exports.prototype['primary_key'] = undefined;
  /**
   * The name of the project this field is defined in.
   * @member {String} project_name
   */
  exports.prototype['project_name'] = undefined;
  /**
   * When true, it's not possible to re-sort this field's values without re-running the SQL query, due to database logic that affects the sort.
   * @member {Boolean} requires_refresh_on_sort
   */
  exports.prototype['requires_refresh_on_sort'] = undefined;
  /**
   * The LookML scope this field belongs to. The scope is typically the field's view.
   * @member {String} scope
   */
  exports.prototype['scope'] = undefined;
  /**
   * Whether this field can be sorted.
   * @member {Boolean} sortable
   */
  exports.prototype['sortable'] = undefined;
  /**
   * The path portion of source_file_path.
   * @member {String} source_file
   */
  exports.prototype['source_file'] = undefined;
  /**
   * The fully-qualified path of the project file this field is defined in.
   * @member {String} source_file_path
   */
  exports.prototype['source_file_path'] = undefined;
  /**
   * SQL expression as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.
   * @member {String} sql
   */
  exports.prototype['sql'] = undefined;
  /**
   * An array of conditions and values that make up a SQL Case expression, as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.
   * @member {Array.<module:model/LookmlModelExploreFieldSqlCase>} sql_case
   */
  exports.prototype['sql_case'] = undefined;
  /**
   * The name of the dimension to base suggest queries from.
   * @member {String} suggest_dimension
   */
  exports.prototype['suggest_dimension'] = undefined;
  /**
   * The name of the explore to base suggest queries from.
   * @member {String} suggest_explore
   */
  exports.prototype['suggest_explore'] = undefined;
  /**
   * Whether or not suggestions are possible for this field.
   * @member {Boolean} suggestable
   */
  exports.prototype['suggestable'] = undefined;
  /**
   * If available, a list of suggestions for this field. For most fields, a suggest query is a more appropriate way to get an up-to-date list of suggestions. Or use enumerations to list all the possible values.
   * @member {Array.<String>} suggestions
   */
  exports.prototype['suggestions'] = undefined;
  /**
   * An array of arbitrary string tags provided in the model for this field.
   * @member {Array.<String>} tags
   */
  exports.prototype['tags'] = undefined;
  /**
   * The LookML type of the field.
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * An array of user attribute types that are allowed to be used in filters on this field. Valid values are: \"advanced_filter_string\", \"advanced_filter_number\", \"advanced_filter_datetime\", \"string\", \"number\", \"datetime\", \"yesno\", \"zipcode\".
   * @member {Array.<String>} user_attribute_filter_types
   */
  exports.prototype['user_attribute_filter_types'] = undefined;
  /**
   * If specified, the LookML value format string for formatting values of this field.
   * @member {String} value_format
   */
  exports.prototype['value_format'] = undefined;
  /**
   * The name of the view this field belongs to.
   * @member {String} view
   */
  exports.prototype['view'] = undefined;
  /**
   * The human-readable label of the view the field belongs to.
   * @member {String} view_label
   */
  exports.prototype['view_label'] = undefined;
  /**
   * Whether this field was specified in \"dynamic_fields\" and is not part of the model.
   * @member {Boolean} dynamic
   */
  exports.prototype['dynamic'] = undefined;
  /**
   * The name of the starting day of the week. Valid values are: \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\".
   * @member {String} week_start_day
   */
  exports.prototype['week_start_day'] = undefined;



  return exports;
}));


