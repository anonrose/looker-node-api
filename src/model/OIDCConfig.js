/**
 * Looker API 3.1 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  This **API 3.1** is in active development. This is where support for new Looker features will appear as non-breaking additions - new functions, new optional parameters on existing functions, or new optional properties in existing types. Additive changes should not impact your existing application code that calls the Looker API. Your existing application code will not be aware of any new Looker API functionality until you choose to upgrade your app to use a newer Looker API client SDK release.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.   ### Examples of new things added in API 3.1:  * Dashboard construction APIs * Themes and custom color collections APIs * Create and run SQL_runner queries * Create and run merged results queries * Create and modify dashboard filters * Create and modify password requirements   ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.   ### Semantic changes in API 3.1:  * `all_looks` no longer includes soft-deleted looks, matching `all_dashboards` behavior. You can find soft-deleted looks using `search_looks` with the `deleted` param set to True. * `all_spaces` no longer includes duplicate items * `search_users` no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, `render_task_results` now returns HTTP status ***202 Accepted*** instead of HTTP status ***102 Processing*** * `all_running_queries` and `kill_query` functions have moved into the `Query` function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.  
 *
 * OpenAPI spec version: 3.1.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Group', 'model/OIDCGroupRead', 'model/OIDCGroupWrite', 'model/OIDCUserAttributeRead', 'model/OIDCUserAttributeWrite', 'model/Role'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Group'), require('./OIDCGroupRead'), require('./OIDCGroupWrite'), require('./OIDCUserAttributeRead'), require('./OIDCUserAttributeWrite'), require('./Role'));
  } else {
    // Browser globals (root is window)
    if (!root.LookerApi31Reference) {
      root.LookerApi31Reference = {};
    }
    root.LookerApi31Reference.OIDCConfig = factory(root.LookerApi31Reference.ApiClient, root.LookerApi31Reference.Group, root.LookerApi31Reference.OIDCGroupRead, root.LookerApi31Reference.OIDCGroupWrite, root.LookerApi31Reference.OIDCUserAttributeRead, root.LookerApi31Reference.OIDCUserAttributeWrite, root.LookerApi31Reference.Role);
  }
}(this, function(ApiClient, Group, OIDCGroupRead, OIDCGroupWrite, OIDCUserAttributeRead, OIDCUserAttributeWrite, Role) {
  'use strict';




  /**
   * The OIDCConfig model module.
   * @module model/OIDCConfig
   * @version 3.1.0
   */

  /**
   * Constructs a new <code>OIDCConfig</code>.
   * @alias module:model/OIDCConfig
   * @class
   */
  var exports = function() {
    var _this = this;































  };

  /**
   * Constructs a <code>OIDCConfig</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OIDCConfig} obj Optional instance to populate.
   * @return {module:model/OIDCConfig} The populated <code>OIDCConfig</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('alternate_email_login_allowed')) {
        obj['alternate_email_login_allowed'] = ApiClient.convertToType(data['alternate_email_login_allowed'], 'Boolean');
      }
      if (data.hasOwnProperty('audience')) {
        obj['audience'] = ApiClient.convertToType(data['audience'], 'String');
      }
      if (data.hasOwnProperty('auth_requires_role')) {
        obj['auth_requires_role'] = ApiClient.convertToType(data['auth_requires_role'], 'Boolean');
      }
      if (data.hasOwnProperty('authorization_endpoint')) {
        obj['authorization_endpoint'] = ApiClient.convertToType(data['authorization_endpoint'], 'String');
      }
      if (data.hasOwnProperty('default_new_user_group_ids')) {
        obj['default_new_user_group_ids'] = ApiClient.convertToType(data['default_new_user_group_ids'], ['Number']);
      }
      if (data.hasOwnProperty('default_new_user_groups')) {
        obj['default_new_user_groups'] = ApiClient.convertToType(data['default_new_user_groups'], [Group]);
      }
      if (data.hasOwnProperty('default_new_user_role_ids')) {
        obj['default_new_user_role_ids'] = ApiClient.convertToType(data['default_new_user_role_ids'], ['Number']);
      }
      if (data.hasOwnProperty('default_new_user_roles')) {
        obj['default_new_user_roles'] = ApiClient.convertToType(data['default_new_user_roles'], [Role]);
      }
      if (data.hasOwnProperty('enabled')) {
        obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
      }
      if (data.hasOwnProperty('groups')) {
        obj['groups'] = ApiClient.convertToType(data['groups'], [OIDCGroupRead]);
      }
      if (data.hasOwnProperty('groups_attribute')) {
        obj['groups_attribute'] = ApiClient.convertToType(data['groups_attribute'], 'String');
      }
      if (data.hasOwnProperty('groups_with_role_ids')) {
        obj['groups_with_role_ids'] = ApiClient.convertToType(data['groups_with_role_ids'], [OIDCGroupWrite]);
      }
      if (data.hasOwnProperty('identifier')) {
        obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
      }
      if (data.hasOwnProperty('issuer')) {
        obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
      }
      if (data.hasOwnProperty('modified_at')) {
        obj['modified_at'] = ApiClient.convertToType(data['modified_at'], 'Date');
      }
      if (data.hasOwnProperty('modified_by')) {
        obj['modified_by'] = ApiClient.convertToType(data['modified_by'], 'Number');
      }
      if (data.hasOwnProperty('new_user_migration_types')) {
        obj['new_user_migration_types'] = ApiClient.convertToType(data['new_user_migration_types'], 'String');
      }
      if (data.hasOwnProperty('scopes')) {
        obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
      }
      if (data.hasOwnProperty('secret')) {
        obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
      }
      if (data.hasOwnProperty('set_roles_from_groups')) {
        obj['set_roles_from_groups'] = ApiClient.convertToType(data['set_roles_from_groups'], 'Boolean');
      }
      if (data.hasOwnProperty('test_slug')) {
        obj['test_slug'] = ApiClient.convertToType(data['test_slug'], 'String');
      }
      if (data.hasOwnProperty('token_endpoint')) {
        obj['token_endpoint'] = ApiClient.convertToType(data['token_endpoint'], 'String');
      }
      if (data.hasOwnProperty('user_attribute_map_email')) {
        obj['user_attribute_map_email'] = ApiClient.convertToType(data['user_attribute_map_email'], 'String');
      }
      if (data.hasOwnProperty('user_attribute_map_first_name')) {
        obj['user_attribute_map_first_name'] = ApiClient.convertToType(data['user_attribute_map_first_name'], 'String');
      }
      if (data.hasOwnProperty('user_attribute_map_last_name')) {
        obj['user_attribute_map_last_name'] = ApiClient.convertToType(data['user_attribute_map_last_name'], 'String');
      }
      if (data.hasOwnProperty('user_attributes')) {
        obj['user_attributes'] = ApiClient.convertToType(data['user_attributes'], [OIDCUserAttributeRead]);
      }
      if (data.hasOwnProperty('user_attributes_with_ids')) {
        obj['user_attributes_with_ids'] = ApiClient.convertToType(data['user_attributes_with_ids'], [OIDCUserAttributeWrite]);
      }
      if (data.hasOwnProperty('userinfo_endpoint')) {
        obj['userinfo_endpoint'] = ApiClient.convertToType(data['userinfo_endpoint'], 'String');
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('can')) {
        obj['can'] = ApiClient.convertToType(data['can'], {'String': 'Boolean'});
      }
    }
    return obj;
  }

  /**
   * Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
   * @member {Boolean} alternate_email_login_allowed
   */
  exports.prototype['alternate_email_login_allowed'] = undefined;
  /**
   * OpenID Provider Audience
   * @member {String} audience
   */
  exports.prototype['audience'] = undefined;
  /**
   * Users will not be allowed to login at all unless a role for them is found in OIDC if set to true
   * @member {Boolean} auth_requires_role
   */
  exports.prototype['auth_requires_role'] = undefined;
  /**
   * OpenID Provider Authorization Url
   * @member {String} authorization_endpoint
   */
  exports.prototype['authorization_endpoint'] = undefined;
  /**
   * (Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC
   * @member {Array.<Number>} default_new_user_group_ids
   */
  exports.prototype['default_new_user_group_ids'] = undefined;
  /**
   * (Read-only) Groups that will be applied to new users the first time they login via OIDC
   * @member {Array.<module:model/Group>} default_new_user_groups
   */
  exports.prototype['default_new_user_groups'] = undefined;
  /**
   * (Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC
   * @member {Array.<Number>} default_new_user_role_ids
   */
  exports.prototype['default_new_user_role_ids'] = undefined;
  /**
   * (Read-only) Roles that will be applied to new users the first time they login via OIDC
   * @member {Array.<module:model/Role>} default_new_user_roles
   */
  exports.prototype['default_new_user_roles'] = undefined;
  /**
   * Enable/Disable OIDC authentication for the server
   * @member {Boolean} enabled
   */
  exports.prototype['enabled'] = undefined;
  /**
   * (Read-only) Array of mappings between OIDC Groups and Looker Roles
   * @member {Array.<module:model/OIDCGroupRead>} groups
   */
  exports.prototype['groups'] = undefined;
  /**
   * Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
   * @member {String} groups_attribute
   */
  exports.prototype['groups_attribute'] = undefined;
  /**
   * (Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids
   * @member {Array.<module:model/OIDCGroupWrite>} groups_with_role_ids
   */
  exports.prototype['groups_with_role_ids'] = undefined;
  /**
   * Relying Party Identifier (provided by OpenID Provider)
   * @member {String} identifier
   */
  exports.prototype['identifier'] = undefined;
  /**
   * OpenID Provider Issuer
   * @member {String} issuer
   */
  exports.prototype['issuer'] = undefined;
  /**
   * When this config was last modified
   * @member {Date} modified_at
   */
  exports.prototype['modified_at'] = undefined;
  /**
   * User id of user who last modified this config
   * @member {Number} modified_by
   */
  exports.prototype['modified_by'] = undefined;
  /**
   * Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
   * @member {String} new_user_migration_types
   */
  exports.prototype['new_user_migration_types'] = undefined;
  /**
   * Array of scopes to request.
   * @member {Array.<String>} scopes
   */
  exports.prototype['scopes'] = undefined;
  /**
   * (Write-Only) Relying Party Secret (provided by OpenID Provider)
   * @member {String} secret
   */
  exports.prototype['secret'] = undefined;
  /**
   * Set user roles in Looker based on groups from OIDC
   * @member {Boolean} set_roles_from_groups
   */
  exports.prototype['set_roles_from_groups'] = undefined;
  /**
   * Slug to identify configurations that are created in order to run a OIDC config test
   * @member {String} test_slug
   */
  exports.prototype['test_slug'] = undefined;
  /**
   * OpenID Provider Token Url
   * @member {String} token_endpoint
   */
  exports.prototype['token_endpoint'] = undefined;
  /**
   * Name of user record attributes used to indicate email address field
   * @member {String} user_attribute_map_email
   */
  exports.prototype['user_attribute_map_email'] = undefined;
  /**
   * Name of user record attributes used to indicate first name
   * @member {String} user_attribute_map_first_name
   */
  exports.prototype['user_attribute_map_first_name'] = undefined;
  /**
   * Name of user record attributes used to indicate last name
   * @member {String} user_attribute_map_last_name
   */
  exports.prototype['user_attribute_map_last_name'] = undefined;
  /**
   * (Read-only) Array of mappings between OIDC User Attributes and Looker User Attributes
   * @member {Array.<module:model/OIDCUserAttributeRead>} user_attributes
   */
  exports.prototype['user_attributes'] = undefined;
  /**
   * (Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids
   * @member {Array.<module:model/OIDCUserAttributeWrite>} user_attributes_with_ids
   */
  exports.prototype['user_attributes_with_ids'] = undefined;
  /**
   * OpenID Provider User Information Url
   * @member {String} userinfo_endpoint
   */
  exports.prototype['userinfo_endpoint'] = undefined;
  /**
   * Link to get this item
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * Operations the current user is able to perform on this object
   * @member {Object.<String, Boolean>} can
   */
  exports.prototype['can'] = undefined;



  return exports;
}));


