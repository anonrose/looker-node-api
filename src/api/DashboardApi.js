/**
 * Looker API 3.1 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  This **API 3.1** is in active development. This is where support for new Looker features will appear as non-breaking additions - new functions, new optional parameters on existing functions, or new optional properties in existing types. Additive changes should not impact your existing application code that calls the Looker API. Your existing application code will not be aware of any new Looker API functionality until you choose to upgrade your app to use a newer Looker API client SDK release.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.   ### Examples of new things added in API 3.1:  * Dashboard construction APIs * Themes and custom color collections APIs * Create and run SQL_runner queries * Create and run merged results queries * Create and modify dashboard filters * Create and modify password requirements   ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.   ### Semantic changes in API 3.1:  * `all_looks` no longer includes soft-deleted looks, matching `all_dashboards` behavior. You can find soft-deleted looks using `search_looks` with the `deleted` param set to True. * `all_spaces` no longer includes duplicate items * `search_users` no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, `render_task_results` now returns HTTP status ***202 Accepted*** instead of HTTP status ***102 Processing*** * `all_running_queries` and `kill_query` functions have moved into the `Query` function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.
 *
 * OpenAPI spec version: 3.1.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateDashboardFilter', 'model/Dashboard', 'model/DashboardBase', 'model/DashboardElement', 'model/DashboardFilter', 'model/DashboardLayout', 'model/DashboardLayoutComponent', 'model/Error', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateDashboardFilter'), require('../model/Dashboard'), require('../model/DashboardBase'), require('../model/DashboardElement'), require('../model/DashboardFilter'), require('../model/DashboardLayout'), require('../model/DashboardLayoutComponent'), require('../model/Error'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.LookerApi31Reference) {
      root.LookerApi31Reference = {};
    }
    root.LookerApi31Reference.DashboardApi = factory(root.LookerApi31Reference.ApiClient, root.LookerApi31Reference.CreateDashboardFilter, root.LookerApi31Reference.Dashboard, root.LookerApi31Reference.DashboardBase, root.LookerApi31Reference.DashboardElement, root.LookerApi31Reference.DashboardFilter, root.LookerApi31Reference.DashboardLayout, root.LookerApi31Reference.DashboardLayoutComponent, root.LookerApi31Reference.Error, root.LookerApi31Reference.ValidationError);
  }
}(this, function(ApiClient, CreateDashboardFilter, Dashboard, DashboardBase, DashboardElement, DashboardFilter, DashboardLayout, DashboardLayoutComponent, Error, ValidationError) {
  'use strict';

  /**
   * Dashboard service.
   * @module api/DashboardApi
   * @version 3.1.0
   */

  /**
   * Constructs a new DashboardApi.
   * @alias module:api/DashboardApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the allDashboards operation.
     * @callback module:api/DashboardApi~allDashboardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DashboardBase>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Dashboards
     * ### Get information about all active dashboards.  Returns an array of **abbreviated dashboard objects**. Dashboards marked as deleted are excluded from this list.  Get the **full details** of a specific dashboard by id with [Dashboard](#!/Dashboard/dashboard)  Find **deleted dashboards** with [Search Dashboards](#!/Dashboard/search_dashboards)
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~allDashboardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DashboardBase>}
     */
    this.allDashboards = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DashboardBase];

      return this.apiClient.callApi(
        '/dashboards', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDashboard operation.
     * @callback module:api/DashboardApi~createDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Dashboard
     * ### Create a dashboard with the specified information  Creates a new dashboard object, returning the dashboard details, including the created id.  **Update** an existing dashboard with [Update Dashboard](#!/Dashboard/update_dashboard)  **Permanently delete** an existing dashboard with [Delete Dashboard](#!/Dashboard/delete_dashboard)
     * @param {Object} opts Optional parameters
     * @param {module:model/Dashboard} opts.body Dashboard
     * @param {module:api/DashboardApi~createDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.createDashboard = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/dashboards', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDashboardElement operation.
     * @callback module:api/DashboardApi~createDashboardElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create DashboardElement
     * ### Create a dashboard element on the dashboard with a specific id.
     * @param {Object} opts Optional parameters
     * @param {module:model/DashboardElement} opts.body DashboardElement
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~createDashboardElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardElement}
     */
    this.createDashboardElement = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DashboardElement;

      return this.apiClient.callApi(
        '/dashboard_elements', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDashboardFilter operation.
     * @callback module:api/DashboardApi~createDashboardFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Dashboard Filter
     * ### Create a dashboard filter on the dashboard with a specific id.
     * @param {module:model/CreateDashboardFilter} body Dashboard Filter
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields
     * @param {module:api/DashboardApi~createDashboardFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardFilter}
     */
    this.createDashboardFilter = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDashboardFilter");
      }


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DashboardFilter;

      return this.apiClient.callApi(
        '/dashboard_filters', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDashboardLayout operation.
     * @callback module:api/DashboardApi~createDashboardLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardLayout} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create DashboardLayout
     * ### Create a dashboard layout on the dashboard with a specific id.
     * @param {Object} opts Optional parameters
     * @param {module:model/DashboardLayout} opts.body DashboardLayout
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~createDashboardLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardLayout}
     */
    this.createDashboardLayout = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DashboardLayout;

      return this.apiClient.callApi(
        '/dashboard_layouts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboard operation.
     * @callback module:api/DashboardApi~dashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Dashboard
     * ### Get information about the dashboard with the specified id  Returns the full details of the identified dashboard object  Get a **summary list** of all active dashboards with [All Dashboards](#!/Dashboard/all_dashboards)  **Search** for dashboards with [Search Dashboards](#!/Dashboard/search_dashboards)
     * @param {String} dashboardId Id of dashboard
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~dashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.dashboard = function(dashboardId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling dashboard");
      }


      var pathParams = {
        'dashboard_id': dashboardId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/dashboards/{dashboard_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardDashboardElements operation.
     * @callback module:api/DashboardApi~dashboardDashboardElementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DashboardElement>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All DashboardElements
     * ### Get information about all the dashboard elements on a dashboard with a specific id.
     * @param {String} dashboardId Id of dashboard
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~dashboardDashboardElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DashboardElement>}
     */
    this.dashboardDashboardElements = function(dashboardId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling dashboardDashboardElements");
      }


      var pathParams = {
        'dashboard_id': dashboardId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DashboardElement];

      return this.apiClient.callApi(
        '/dashboards/{dashboard_id}/dashboard_elements', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardDashboardFilters operation.
     * @callback module:api/DashboardApi~dashboardDashboardFiltersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DashboardFilter>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Dashboard Filters
     * ### Get information about all the dashboard filters on a dashboard with a specific id.
     * @param {String} dashboardId Id of dashboard
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~dashboardDashboardFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DashboardFilter>}
     */
    this.dashboardDashboardFilters = function(dashboardId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling dashboardDashboardFilters");
      }


      var pathParams = {
        'dashboard_id': dashboardId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DashboardFilter];

      return this.apiClient.callApi(
        '/dashboards/{dashboard_id}/dashboard_filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardDashboardLayouts operation.
     * @callback module:api/DashboardApi~dashboardDashboardLayoutsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DashboardLayout>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All DashboardLayouts
     * ### Get information about all the dashboard elements on a dashboard with a specific id.
     * @param {String} dashboardId Id of dashboard
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~dashboardDashboardLayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DashboardLayout>}
     */
    this.dashboardDashboardLayouts = function(dashboardId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling dashboardDashboardLayouts");
      }


      var pathParams = {
        'dashboard_id': dashboardId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DashboardLayout];

      return this.apiClient.callApi(
        '/dashboards/{dashboard_id}/dashboard_layouts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardElement operation.
     * @callback module:api/DashboardApi~dashboardElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get DashboardElement
     * ### Get information about the dashboard element with a specific id.
     * @param {String} dashboardElementId Id of dashboard element
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~dashboardElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardElement}
     */
    this.dashboardElement = function(dashboardElementId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dashboardElementId' is set
      if (dashboardElementId === undefined || dashboardElementId === null) {
        throw new Error("Missing the required parameter 'dashboardElementId' when calling dashboardElement");
      }


      var pathParams = {
        'dashboard_element_id': dashboardElementId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DashboardElement;

      return this.apiClient.callApi(
        '/dashboard_elements/{dashboard_element_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardFilter operation.
     * @callback module:api/DashboardApi~dashboardFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Dashboard Filter
     * ### Get information about the dashboard filters with a specific id.
     * @param {String} dashboardFilterId Id of dashboard filters
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~dashboardFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardFilter}
     */
    this.dashboardFilter = function(dashboardFilterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dashboardFilterId' is set
      if (dashboardFilterId === undefined || dashboardFilterId === null) {
        throw new Error("Missing the required parameter 'dashboardFilterId' when calling dashboardFilter");
      }


      var pathParams = {
        'dashboard_filter_id': dashboardFilterId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DashboardFilter;

      return this.apiClient.callApi(
        '/dashboard_filters/{dashboard_filter_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardLayout operation.
     * @callback module:api/DashboardApi~dashboardLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardLayout} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get DashboardLayout
     * ### Get information about the dashboard layouts with a specific id.
     * @param {String} dashboardLayoutId Id of dashboard layouts
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~dashboardLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardLayout}
     */
    this.dashboardLayout = function(dashboardLayoutId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dashboardLayoutId' is set
      if (dashboardLayoutId === undefined || dashboardLayoutId === null) {
        throw new Error("Missing the required parameter 'dashboardLayoutId' when calling dashboardLayout");
      }


      var pathParams = {
        'dashboard_layout_id': dashboardLayoutId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DashboardLayout;

      return this.apiClient.callApi(
        '/dashboard_layouts/{dashboard_layout_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardLayoutComponent operation.
     * @callback module:api/DashboardApi~dashboardLayoutComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardLayoutComponent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get DashboardLayoutComponent
     * ### Get information about the dashboard elements with a specific id.
     * @param {String} dashboardLayoutComponentId Id of dashboard layout component
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~dashboardLayoutComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardLayoutComponent}
     */
    this.dashboardLayoutComponent = function(dashboardLayoutComponentId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dashboardLayoutComponentId' is set
      if (dashboardLayoutComponentId === undefined || dashboardLayoutComponentId === null) {
        throw new Error("Missing the required parameter 'dashboardLayoutComponentId' when calling dashboardLayoutComponent");
      }


      var pathParams = {
        'dashboard_layout_component_id': dashboardLayoutComponentId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DashboardLayoutComponent;

      return this.apiClient.callApi(
        '/dashboard_layout_components/{dashboard_layout_component_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardLayoutDashboardLayoutComponents operation.
     * @callback module:api/DashboardApi~dashboardLayoutDashboardLayoutComponentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DashboardLayoutComponent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All DashboardLayoutComponents
     * ### Get information about all the dashboard layout components for a dashboard layout with a specific id.
     * @param {String} dashboardLayoutId Id of dashboard layout component
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~dashboardLayoutDashboardLayoutComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DashboardLayoutComponent>}
     */
    this.dashboardLayoutDashboardLayoutComponents = function(dashboardLayoutId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dashboardLayoutId' is set
      if (dashboardLayoutId === undefined || dashboardLayoutId === null) {
        throw new Error("Missing the required parameter 'dashboardLayoutId' when calling dashboardLayoutDashboardLayoutComponents");
      }


      var pathParams = {
        'dashboard_layout_id': dashboardLayoutId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DashboardLayoutComponent];

      return this.apiClient.callApi(
        '/dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDashboard operation.
     * @callback module:api/DashboardApi~deleteDashboardCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Dashboard
     * ### Delete the dashboard with the specified id  Permanently **deletes** a dashboard. (The dashboard cannot be recovered after this operation.)  \&quot;Soft\&quot; delete or hide a dashboard by setting its &#x60;deleted&#x60; status to &#x60;True&#x60; with [Update Dashboard](#!/Dashboard/update_dashboard).  Note: When a dashboard is deleted in the UI, it is soft deleted. Use this API call to permanently remove it, if desired.
     * @param {String} dashboardId Id of dashboard
     * @param {module:api/DashboardApi~deleteDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteDashboard = function(dashboardId, callback) {
      var postBody = null;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling deleteDashboard");
      }


      var pathParams = {
        'dashboard_id': dashboardId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/dashboards/{dashboard_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDashboardElement operation.
     * @callback module:api/DashboardApi~deleteDashboardElementCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete DashboardElement
     * ### Delete a dashboard element with a specific id.
     * @param {String} dashboardElementId Id of dashboard element
     * @param {module:api/DashboardApi~deleteDashboardElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteDashboardElement = function(dashboardElementId, callback) {
      var postBody = null;

      // verify the required parameter 'dashboardElementId' is set
      if (dashboardElementId === undefined || dashboardElementId === null) {
        throw new Error("Missing the required parameter 'dashboardElementId' when calling deleteDashboardElement");
      }


      var pathParams = {
        'dashboard_element_id': dashboardElementId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/dashboard_elements/{dashboard_element_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDashboardFilter operation.
     * @callback module:api/DashboardApi~deleteDashboardFilterCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Dashboard Filter
     * ### Delete a dashboard filter with a specific id.
     * @param {String} dashboardFilterId Id of dashboard filter
     * @param {module:api/DashboardApi~deleteDashboardFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteDashboardFilter = function(dashboardFilterId, callback) {
      var postBody = null;

      // verify the required parameter 'dashboardFilterId' is set
      if (dashboardFilterId === undefined || dashboardFilterId === null) {
        throw new Error("Missing the required parameter 'dashboardFilterId' when calling deleteDashboardFilter");
      }


      var pathParams = {
        'dashboard_filter_id': dashboardFilterId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/dashboard_filters/{dashboard_filter_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDashboardLayout operation.
     * @callback module:api/DashboardApi~deleteDashboardLayoutCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete DashboardLayout
     * ### Delete a dashboard layout with a specific id.
     * @param {String} dashboardLayoutId Id of dashboard layout
     * @param {module:api/DashboardApi~deleteDashboardLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteDashboardLayout = function(dashboardLayoutId, callback) {
      var postBody = null;

      // verify the required parameter 'dashboardLayoutId' is set
      if (dashboardLayoutId === undefined || dashboardLayoutId === null) {
        throw new Error("Missing the required parameter 'dashboardLayoutId' when calling deleteDashboardLayout");
      }


      var pathParams = {
        'dashboard_layout_id': dashboardLayoutId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/dashboard_layouts/{dashboard_layout_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importLookmlDashboard operation.
     * @callback module:api/DashboardApi~importLookmlDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import LookML Dashboard
     * ### Import a LookML dashboard to a space as a UDD Creates a UDD (a dashboard which exists in the Looker database rather than as a LookML file) from the LookML dashboard and puts it in the space specified. The created UDD will have a lookml_link_id which links to the original LookML dashboard.  To give the imported dashboard specify a (e.g. title: \&quot;my title\&quot;) in the body of your request, otherwise the imported dashboard will have the same title as the original LookML dashboard.  For this operation to succeed the user must have permission to see the LookML dashboard in question, and have permission to create content in the space the dashboard is being imported to.  **Sync** a linked UDD with [Sync LookML Dashboard] (#!/Dashboard/sync_lookml_dashboard) **Unlink** a linked UDD by setting lookml_link_id to null with [Update Dashboard](#!/Dashboard/update_dashboard)
     * @param {String} lookmlDashboardId Id of LookML dashboard
     * @param {String} spaceId Id of space to import the dashboard to
     * @param {Object} opts Optional parameters
     * @param {module:model/Dashboard} opts.body Dashboard
     * @param {Boolean} opts.rawLocale If true, and this dashboard is localized, export it with the raw keys, not localized.
     * @param {module:api/DashboardApi~importLookmlDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.importLookmlDashboard = function(lookmlDashboardId, spaceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'lookmlDashboardId' is set
      if (lookmlDashboardId === undefined || lookmlDashboardId === null) {
        throw new Error("Missing the required parameter 'lookmlDashboardId' when calling importLookmlDashboard");
      }

      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling importLookmlDashboard");
      }


      var pathParams = {
        'lookml_dashboard_id': lookmlDashboardId,
        'space_id': spaceId
      };
      var queryParams = {
        'raw_locale': opts['rawLocale'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/dashboards/{lookml_dashboard_id}/import/{space_id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchDashboardElements operation.
     * @callback module:api/DashboardApi~searchDashboardElementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DashboardElement>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Dashboard Elements
     * ### Search Dashboard Elements  Returns an **array of DashboardElement objects** that match the specified search criteria.  If multiple search params are given and &#x60;filter_or&#x60; is FALSE or not specified, search params are combined in a logical AND operation. Only rows that match *all* search param criteria will be returned.  If &#x60;filter_or&#x60; is TRUE, multiple search params are combined in a logical OR operation. Results will include rows that match **any** of the search criteria.  String search params use case-insensitive matching. String search params can contain &#x60;%&#x60; and &#39;_&#39; as SQL LIKE pattern match wildcard expressions. example&#x3D;\&quot;dan%\&quot; will match \&quot;danger\&quot; and \&quot;Danzig\&quot; but not \&quot;David\&quot; example&#x3D;\&quot;D_m%\&quot; will match \&quot;Damage\&quot; and \&quot;dump\&quot;  Integer search params can accept a single value or a comma separated list of values. The multiple values will be combined under a logical OR operation - results will match at least one of the given values.  Most search params can accept \&quot;IS NULL\&quot; and \&quot;NOT NULL\&quot; as special expressions to match or exclude (respectively) rows where the column is null.  Boolean search params accept only \&quot;true\&quot; and \&quot;false\&quot; as values.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.dashboardId Select elements that refer to a given dashboard id
     * @param {Number} opts.lookId Select elements that refer to a given look id
     * @param {String} opts.title Match the title of element
     * @param {Boolean} opts.deleted Select soft-deleted dashboard elements
     * @param {String} opts.fields Requested fields.
     * @param {Boolean} opts.filterOr Combine given search criteria in a boolean OR expression
     * @param {String} opts.sorts Fields to sort by. Sortable fields: [:look_id, :dashboard_id, :deleted, :title]
     * @param {module:api/DashboardApi~searchDashboardElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DashboardElement>}
     */
    this.searchDashboardElements = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'dashboard_id': opts['dashboardId'],
        'look_id': opts['lookId'],
        'title': opts['title'],
        'deleted': opts['deleted'],
        'fields': opts['fields'],
        'filter_or': opts['filterOr'],
        'sorts': opts['sorts'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DashboardElement];

      return this.apiClient.callApi(
        '/dashboard_elements/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchDashboards operation.
     * @callback module:api/DashboardApi~searchDashboardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Dashboard>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Dashboards
     * ### Search Dashboards  Returns an **array of dashboard objects** that match the specified search criteria.  If multiple search params are given and &#x60;filter_or&#x60; is FALSE or not specified, search params are combined in a logical AND operation. Only rows that match *all* search param criteria will be returned.  If &#x60;filter_or&#x60; is TRUE, multiple search params are combined in a logical OR operation. Results will include rows that match **any** of the search criteria.  String search params use case-insensitive matching. String search params can contain &#x60;%&#x60; and &#39;_&#39; as SQL LIKE pattern match wildcard expressions. example&#x3D;\&quot;dan%\&quot; will match \&quot;danger\&quot; and \&quot;Danzig\&quot; but not \&quot;David\&quot; example&#x3D;\&quot;D_m%\&quot; will match \&quot;Damage\&quot; and \&quot;dump\&quot;  Integer search params can accept a single value or a comma separated list of values. The multiple values will be combined under a logical OR operation - results will match at least one of the given values.  Most search params can accept \&quot;IS NULL\&quot; and \&quot;NOT NULL\&quot; as special expressions to match or exclude (respectively) rows where the column is null.  Boolean search params accept only \&quot;true\&quot; and \&quot;false\&quot; as values.   The parameters &#x60;limit&#x60;, and &#x60;offset&#x60; are recommended for fetching results in page-size chunks.  Get a **single dashboard** by id with [Dashboard](#!/Dashboard/dashboard)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id Match dashboard id.
     * @param {String} opts.slug Match dashboard slug.
     * @param {String} opts.title Match Dashboard title.
     * @param {String} opts.description Match Dashboard description.
     * @param {Number} opts.contentFavoriteId Filter on a content favorite id.
     * @param {String} opts.spaceId Filter on a particular space.
     * @param {String} opts.deleted Filter on dashboards deleted status.
     * @param {String} opts.userId Filter on dashboards created by a particular user.
     * @param {String} opts.viewCount Filter on a particular value of view_count
     * @param {Number} opts.contentMetadataId Filter on a content favorite id.
     * @param {String} opts.fields Requested fields.
     * @param {Number} opts.page Requested page.
     * @param {Number} opts.perPage Results per page.
     * @param {Number} opts.limit Number of results to return. (used with offset and takes priority over page and per_page)
     * @param {Number} opts.offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page)
     * @param {String} opts.sorts One or more fields to sort by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :description, :view_count, :favorite_count, :slug, :content_favorite_id, :content_metadata_id, :deleted, :deleted_at, :last_viewed_at]
     * @param {Boolean} opts.filterOr Combine given search criteria in a boolean OR expression
     * @param {module:api/DashboardApi~searchDashboardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Dashboard>}
     */
    this.searchDashboards = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'slug': opts['slug'],
        'title': opts['title'],
        'description': opts['description'],
        'content_favorite_id': opts['contentFavoriteId'],
        'space_id': opts['spaceId'],
        'deleted': opts['deleted'],
        'user_id': opts['userId'],
        'view_count': opts['viewCount'],
        'content_metadata_id': opts['contentMetadataId'],
        'fields': opts['fields'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sorts': opts['sorts'],
        'filter_or': opts['filterOr'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Dashboard];

      return this.apiClient.callApi(
        '/dashboards/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the syncLookmlDashboard operation.
     * @callback module:api/DashboardApi~syncLookmlDashboardCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync LookML Dashboard
     * ### Update all linked dashboards to match the specified LookML dashboard.  Any UDD (a dashboard which exists in the Looker database rather than as a LookML file) which has a &#x60;lookml_link_id&#x60; property value referring to a LookML dashboard&#39;s id (model::dashboardname) will be updated so that it matches the current state of the LookML dashboard.  For this operation to succeed the user must have permission to view the LookML dashboard, and only linked dashboards that the user has permission to update will be synced.  To **link** or **unlink** a UDD set the &#x60;lookml_link_id&#x60; property with [Update Dashboard](#!/Dashboard/update_dashboard)
     * @param {String} lookmlDashboardId Id of LookML dashboard, in the form &#39;model::dashboardname&#39;
     * @param {module:model/Dashboard} body Dashboard
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.rawLocale If true, and this dashboard is localized, export it with the raw keys, not localized.
     * @param {module:api/DashboardApi~syncLookmlDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.syncLookmlDashboard = function(lookmlDashboardId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'lookmlDashboardId' is set
      if (lookmlDashboardId === undefined || lookmlDashboardId === null) {
        throw new Error("Missing the required parameter 'lookmlDashboardId' when calling syncLookmlDashboard");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling syncLookmlDashboard");
      }


      var pathParams = {
        'lookml_dashboard_id': lookmlDashboardId
      };
      var queryParams = {
        'raw_locale': opts['rawLocale'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/dashboards/{lookml_dashboard_id}/sync', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDashboard operation.
     * @callback module:api/DashboardApi~updateDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Dashboard
     * ### Update the dashboard with the specified id  Changes simple (scalar) properties of the dashboard.
     * @param {String} dashboardId Id of dashboard
     * @param {module:model/Dashboard} body Dashboard
     * @param {module:api/DashboardApi~updateDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.updateDashboard = function(dashboardId, body, callback) {
      var postBody = body;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling updateDashboard");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDashboard");
      }


      var pathParams = {
        'dashboard_id': dashboardId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/dashboards/{dashboard_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDashboardElement operation.
     * @callback module:api/DashboardApi~updateDashboardElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update DashboardElement
     * ### Update the dashboard element with a specific id.
     * @param {String} dashboardElementId Id of dashboard element
     * @param {module:model/DashboardElement} body DashboardElement
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~updateDashboardElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardElement}
     */
    this.updateDashboardElement = function(dashboardElementId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'dashboardElementId' is set
      if (dashboardElementId === undefined || dashboardElementId === null) {
        throw new Error("Missing the required parameter 'dashboardElementId' when calling updateDashboardElement");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDashboardElement");
      }


      var pathParams = {
        'dashboard_element_id': dashboardElementId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DashboardElement;

      return this.apiClient.callApi(
        '/dashboard_elements/{dashboard_element_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDashboardFilter operation.
     * @callback module:api/DashboardApi~updateDashboardFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Dashboard Filter
     * ### Update the dashboard filter with a specific id.
     * @param {String} dashboardFilterId Id of dashboard filter
     * @param {module:model/DashboardFilter} body Dashboard Filter
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~updateDashboardFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardFilter}
     */
    this.updateDashboardFilter = function(dashboardFilterId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'dashboardFilterId' is set
      if (dashboardFilterId === undefined || dashboardFilterId === null) {
        throw new Error("Missing the required parameter 'dashboardFilterId' when calling updateDashboardFilter");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDashboardFilter");
      }


      var pathParams = {
        'dashboard_filter_id': dashboardFilterId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DashboardFilter;

      return this.apiClient.callApi(
        '/dashboard_filters/{dashboard_filter_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDashboardLayout operation.
     * @callback module:api/DashboardApi~updateDashboardLayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardLayout} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update DashboardLayout
     * ### Update the dashboard layout with a specific id.
     * @param {String} dashboardLayoutId Id of dashboard layout
     * @param {module:model/DashboardLayout} body DashboardLayout
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~updateDashboardLayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardLayout}
     */
    this.updateDashboardLayout = function(dashboardLayoutId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'dashboardLayoutId' is set
      if (dashboardLayoutId === undefined || dashboardLayoutId === null) {
        throw new Error("Missing the required parameter 'dashboardLayoutId' when calling updateDashboardLayout");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDashboardLayout");
      }


      var pathParams = {
        'dashboard_layout_id': dashboardLayoutId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DashboardLayout;

      return this.apiClient.callApi(
        '/dashboard_layouts/{dashboard_layout_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDashboardLayoutComponent operation.
     * @callback module:api/DashboardApi~updateDashboardLayoutComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardLayoutComponent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update DashboardLayoutComponent
     * ### Update the dashboard element with a specific id.
     * @param {String} dashboardLayoutComponentId Id of dashboard layout component
     * @param {module:model/DashboardLayoutComponent} body DashboardLayoutComponent
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/DashboardApi~updateDashboardLayoutComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardLayoutComponent}
     */
    this.updateDashboardLayoutComponent = function(dashboardLayoutComponentId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'dashboardLayoutComponentId' is set
      if (dashboardLayoutComponentId === undefined || dashboardLayoutComponentId === null) {
        throw new Error("Missing the required parameter 'dashboardLayoutComponentId' when calling updateDashboardLayoutComponent");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDashboardLayoutComponent");
      }


      var pathParams = {
        'dashboard_layout_component_id': dashboardLayoutComponentId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DashboardLayoutComponent;

      return this.apiClient.callApi(
        '/dashboard_layout_components/{dashboard_layout_component_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
