/**
 * Looker API 3.1 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  This **API 3.1** is in active development. This is where support for new Looker features will appear as non-breaking additions - new functions, new optional parameters on existing functions, or new optional properties in existing types. Additive changes should not impact your existing application code that calls the Looker API. Your existing application code will not be aware of any new Looker API functionality until you choose to upgrade your app to use a newer Looker API client SDK release.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.   ### Examples of new things added in API 3.1:  * Dashboard construction APIs * Themes and custom color collections APIs * Create and run SQL_runner queries * Create and run merged results queries * Create and modify dashboard filters * Create and modify password requirements   ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.   ### Semantic changes in API 3.1:  * `all_looks` no longer includes soft-deleted looks, matching `all_dashboards` behavior. You can find soft-deleted looks using `search_looks` with the `deleted` param set to True. * `all_spaces` no longer includes duplicate items * `search_users` no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, `render_task_results` now returns HTTP status ***202 Accepted*** instead of HTTP status ***102 Processing*** * `all_running_queries` and `kill_query` functions have moved into the `Query` function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.
 *
 * OpenAPI spec version: 3.1.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/GitBranch', 'model/GitConnectionTest', 'model/GitConnectionTestResult', 'model/Manifest', 'model/Project', 'model/ProjectFile', 'model/ProjectValidation', 'model/ProjectValidationCache', 'model/ProjectWorkspace', 'model/RepositoryCredential', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/GitBranch'), require('../model/GitConnectionTest'), require('../model/GitConnectionTestResult'), require('../model/Manifest'), require('../model/Project'), require('../model/ProjectFile'), require('../model/ProjectValidation'), require('../model/ProjectValidationCache'), require('../model/ProjectWorkspace'), require('../model/RepositoryCredential'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.LookerApi31Reference) {
      root.LookerApi31Reference = {};
    }
    root.LookerApi31Reference.ProjectApi = factory(root.LookerApi31Reference.ApiClient, root.LookerApi31Reference.Error, root.LookerApi31Reference.GitBranch, root.LookerApi31Reference.GitConnectionTest, root.LookerApi31Reference.GitConnectionTestResult, root.LookerApi31Reference.Manifest, root.LookerApi31Reference.Project, root.LookerApi31Reference.ProjectFile, root.LookerApi31Reference.ProjectValidation, root.LookerApi31Reference.ProjectValidationCache, root.LookerApi31Reference.ProjectWorkspace, root.LookerApi31Reference.RepositoryCredential, root.LookerApi31Reference.ValidationError);
  }
}(this, function(ApiClient, Error, GitBranch, GitConnectionTest, GitConnectionTestResult, Manifest, Project, ProjectFile, ProjectValidation, ProjectValidationCache, ProjectWorkspace, RepositoryCredential, ValidationError) {
  'use strict';

  /**
   * Project service.
   * @module api/ProjectApi
   * @version 3.1.0
   */

  /**
   * Constructs a new ProjectApi.
   * @alias module:api/ProjectApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the allGitBranches operation.
     * @callback module:api/ProjectApi~allGitBranchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GitBranch>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Git Branches
     * ### Get All Git Branches  Returns a list of git branches in the project repository
     * @param {String} projectId Project Id
     * @param {module:api/ProjectApi~allGitBranchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GitBranch>}
     */
    this.allGitBranches = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling allGitBranches");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [GitBranch];

      return this.apiClient.callApi(
        '/projects/{project_id}/git_branches', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the allGitConnectionTests operation.
     * @callback module:api/ProjectApi~allGitConnectionTestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GitConnectionTest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Git Connection Tests
     * ### Get All Git Connection Tests  Returns a list of tests which can be run against a project&#39;s (or the dependency project for the provided remote_url) git connection. Call [Run Git Connection Test](#!/Project/run_git_connection_test) to execute each test in sequence.  Tests are ordered by increasing specificity. Tests should be run in the order returned because later tests require functionality tested by tests earlier in the test list.  For example, a late-stage test for write access is meaningless if connecting to the git server (an early test) is failing.
     * @param {String} projectId Project Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.remoteUrl (Optional: leave blank for root project) The remote url for remote dependency to test.
     * @param {module:api/ProjectApi~allGitConnectionTestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GitConnectionTest>}
     */
    this.allGitConnectionTests = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling allGitConnectionTests");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'remote_url': opts['remoteUrl'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [GitConnectionTest];

      return this.apiClient.callApi(
        '/projects/{project_id}/git_connection_tests', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the allProjectFiles operation.
     * @callback module:api/ProjectApi~allProjectFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Project Files
     * ### Get All Project Files  Returns a list of the files in the project
     * @param {String} projectId Project Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields
     * @param {module:api/ProjectApi~allProjectFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFile>}
     */
    this.allProjectFiles = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling allProjectFiles");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ProjectFile];

      return this.apiClient.callApi(
        '/projects/{project_id}/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the allProjects operation.
     * @callback module:api/ProjectApi~allProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Projects
     * ### Get All Projects  Returns all projects visible to the current user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields
     * @param {module:api/ProjectApi~allProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    this.allProjects = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Project];

      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createGitBranch operation.
     * @callback module:api/ProjectApi~createGitBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GitBranch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checkout New Git Branch
     * ### Create and Checkout a Git Branch  Creates and checks out a new branch in the given project repository Only allowed in development mode   - Call &#x60;update_session&#x60; to select the &#39;dev&#39; workspace.  Optionally specify a branch name, tag name or commit SHA as the start point in the ref field.   If no ref is specified, HEAD of the current branch will be used as the start point for the new branch.
     * @param {String} projectId Project Id
     * @param {Object} opts Optional parameters
     * @param {module:model/GitBranch} opts.body Git Branch
     * @param {module:api/ProjectApi~createGitBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GitBranch}
     */
    this.createGitBranch = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createGitBranch");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GitBranch;

      return this.apiClient.callApi(
        '/projects/{project_id}/git_branch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createGitDeployKey operation.
     * @callback module:api/ProjectApi~createGitDeployKeyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Deploy Key
     * ### Create Git Deploy Key  Create a public/private key pair for authenticating ssh git requests from Looker to a remote git repository for a particular Looker project.  Returns the public key of the generated ssh key pair.  Copy this public key to your remote git repository&#39;s ssh keys configuration so that the remote git service can validate and accept git requests from the Looker server.
     * @param {String} projectId Project Id
     * @param {module:api/ProjectApi~createGitDeployKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.createGitDeployKey = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createGitDeployKey");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/projects/{project_id}/git/deploy_key', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/ProjectApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Project
     * ### Create A Project  dev mode required. - Call &#x60;update_session&#x60; to select the &#39;dev&#39; workspace.  &#x60;name&#x60; is required. &#x60;git_remote_url&#x60; is not allowed. To configure Git for the newly created project, follow the instructions in &#x60;update_project&#x60;.
     * @param {Object} opts Optional parameters
     * @param {module:model/Project} opts.body Project
     * @param {module:api/ProjectApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.createProject = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGitBranch operation.
     * @callback module:api/ProjectApi~deleteGitBranchCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Git Branch
     * ### Delete the specified Git Branch  Delete git branch specified in branch_name path param from local and remote of specified project repository
     * @param {String} projectId Project Id
     * @param {String} branchName Branch Name
     * @param {module:api/ProjectApi~deleteGitBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteGitBranch = function(projectId, branchName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteGitBranch");
      }

      // verify the required parameter 'branchName' is set
      if (branchName === undefined || branchName === null) {
        throw new Error("Missing the required parameter 'branchName' when calling deleteGitBranch");
      }


      var pathParams = {
        'project_id': projectId,
        'branch_name': branchName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/projects/{project_id}/git_branch/{branch_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryCredential operation.
     * @callback module:api/ProjectApi~deleteRepositoryCredentialCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Repository Credential
     * ### Repository Credential for a remote dependency  Admin required.  &#x60;root_project_id&#x60; is required. &#x60;credential_id&#x60; is required.
     * @param {String} rootProjectId Root Project Id
     * @param {String} credentialId Credential Id
     * @param {module:api/ProjectApi~deleteRepositoryCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteRepositoryCredential = function(rootProjectId, credentialId, callback) {
      var postBody = null;

      // verify the required parameter 'rootProjectId' is set
      if (rootProjectId === undefined || rootProjectId === null) {
        throw new Error("Missing the required parameter 'rootProjectId' when calling deleteRepositoryCredential");
      }

      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling deleteRepositoryCredential");
      }


      var pathParams = {
        'root_project_id': rootProjectId,
        'credential_id': credentialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/projects/{root_project_id}/credential/{credential_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deployToProduction operation.
     * @callback module:api/ProjectApi~deployToProductionCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy To Production
     * ### Deploy LookML from this Development Mode Project to Production  Git must have been configured, must be in dev mode and deploy permission required  Deploy is a two / three step process 1. Push commits in current branch of dev mode project to the production branch (origin/master).    Note a. This step is skipped in read-only projects.    Note b. If this step is unsuccessful for any reason (e.g. rejected non-fastforward because production branch has              commits not in current branch), subsequent steps will be skipped. 2. If this is the first deploy of this project, create the production project with git repository. 3. Pull the production branch into the production project.
     * @param {String} projectId Id of project
     * @param {module:api/ProjectApi~deployToProductionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deployToProduction = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deployToProduction");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/projects/{project_id}/deploy_to_production', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findGitBranch operation.
     * @callback module:api/ProjectApi~findGitBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GitBranch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a Git Branch
     * ### Get the specified Git Branch  Returns the git branch specified in branch_name path param if it exists in the given project repository
     * @param {String} projectId Project Id
     * @param {String} branchName Branch Name
     * @param {module:api/ProjectApi~findGitBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GitBranch}
     */
    this.findGitBranch = function(projectId, branchName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling findGitBranch");
      }

      // verify the required parameter 'branchName' is set
      if (branchName === undefined || branchName === null) {
        throw new Error("Missing the required parameter 'branchName' when calling findGitBranch");
      }


      var pathParams = {
        'project_id': projectId,
        'branch_name': branchName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GitBranch;

      return this.apiClient.callApi(
        '/projects/{project_id}/git_branch/{branch_name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllRepositoryCredentials operation.
     * @callback module:api/ProjectApi~getAllRepositoryCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepositoryCredential>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Repository Credentials
     * ### Get all Repository Credentials for a project  &#x60;root_project_id&#x60; is required.
     * @param {String} rootProjectId Root Project Id
     * @param {module:api/ProjectApi~getAllRepositoryCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepositoryCredential>}
     */
    this.getAllRepositoryCredentials = function(rootProjectId, callback) {
      var postBody = null;

      // verify the required parameter 'rootProjectId' is set
      if (rootProjectId === undefined || rootProjectId === null) {
        throw new Error("Missing the required parameter 'rootProjectId' when calling getAllRepositoryCredentials");
      }


      var pathParams = {
        'root_project_id': rootProjectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RepositoryCredential];

      return this.apiClient.callApi(
        '/projects/{root_project_id}/credentials', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the gitBranch operation.
     * @callback module:api/ProjectApi~gitBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GitBranch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Active Git Branch
     * ### Get the Current Git Branch  Returns the git branch currently checked out in the given project repository
     * @param {String} projectId Project Id
     * @param {module:api/ProjectApi~gitBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GitBranch}
     */
    this.gitBranch = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling gitBranch");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GitBranch;

      return this.apiClient.callApi(
        '/projects/{project_id}/git_branch', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the gitDeployKey operation.
     * @callback module:api/ProjectApi~gitDeployKeyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Git Deploy Key
     * ### Git Deploy Key  Returns the ssh public key previously created for a project&#39;s git repository.
     * @param {String} projectId Project Id
     * @param {module:api/ProjectApi~gitDeployKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.gitDeployKey = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling gitDeployKey");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/projects/{project_id}/git/deploy_key', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manifest operation.
     * @callback module:api/ProjectApi~manifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manifest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Manifest
     * ### Get A Projects Manifest object  Returns the project with the given project id
     * @param {String} projectId Project Id
     * @param {module:api/ProjectApi~manifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manifest}
     */
    this.manifest = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling manifest");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Manifest;

      return this.apiClient.callApi(
        '/projects/{project_id}/manifest', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the project operation.
     * @callback module:api/ProjectApi~projectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project
     * ### Get A Project  Returns the project with the given project id
     * @param {String} projectId Project Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields
     * @param {module:api/ProjectApi~projectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.project = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling project");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/projects/{project_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFile operation.
     * @callback module:api/ProjectApi~projectFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project File
     * ### Get Project File Info  Returns information about a file in the project
     * @param {String} projectId Project Id
     * @param {String} fileId File Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields
     * @param {module:api/ProjectApi~projectFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectFile}
     */
    this.projectFile = function(projectId, fileId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling projectFile");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'file_id': fileId,
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProjectFile;

      return this.apiClient.callApi(
        '/projects/{project_id}/files/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectValidationResults operation.
     * @callback module:api/ProjectApi~projectValidationResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectValidationCache} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cached Project Validation Results
     * ### Get Cached Project Validation Results  Returns the cached results of a previous project validation calculation, if any. Returns http status 204 No Content if no validation results exist.  Validating the content of all the files in a project can be computationally intensive for large projects. Use this API to simply fetch the results of the most recent project validation rather than revalidating the entire project from scratch.  A value of &#x60;\&quot;stale\&quot;: true&#x60; in the response indicates that the project has changed since the cached validation results were computed. The cached validation results may no longer reflect the current state of the project.
     * @param {String} projectId Project Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields
     * @param {module:api/ProjectApi~projectValidationResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectValidationCache}
     */
    this.projectValidationResults = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectValidationResults");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProjectValidationCache;

      return this.apiClient.callApi(
        '/projects/{project_id}/validate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWorkspace operation.
     * @callback module:api/ProjectApi~projectWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectWorkspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project Workspace
     * ### Get Project Workspace  Returns information about the state of the project files in the currently selected workspace
     * @param {String} projectId Project Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields
     * @param {module:api/ProjectApi~projectWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectWorkspace}
     */
    this.projectWorkspace = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectWorkspace");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProjectWorkspace;

      return this.apiClient.callApi(
        '/projects/{project_id}/current_workspace', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetProjectToProduction operation.
     * @callback module:api/ProjectApi~resetProjectToProductionCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset To Production
     * ### Reset a project to the revision of the project that is in production.  **DANGER** this will delete any changes that have not been pushed to a remote repository.
     * @param {String} projectId Id of project
     * @param {module:api/ProjectApi~resetProjectToProductionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.resetProjectToProduction = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling resetProjectToProduction");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/projects/{project_id}/reset_to_production', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetProjectToRemote operation.
     * @callback module:api/ProjectApi~resetProjectToRemoteCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset To Remote
     * ### Reset a project development branch to the revision of the project that is on the remote.  **DANGER** this will delete any changes that have not been pushed to a remote repository.
     * @param {String} projectId Id of project
     * @param {module:api/ProjectApi~resetProjectToRemoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.resetProjectToRemote = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling resetProjectToRemote");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/projects/{project_id}/reset_to_remote', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runGitConnectionTest operation.
     * @callback module:api/ProjectApi~runGitConnectionTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GitConnectionTestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run Git Connection Test
     * ### Run a git connection test  Run the named test on the git service used by this project (or the dependency project for the provided remote_url) and return the result. This is intended to help debug git connections when things do not work properly, to give more helpful information about why a git url is not working with Looker.  Tests should be run in the order they are returned by [Get All Git Connection Tests](#!/Project/all_git_connection_tests).
     * @param {String} projectId Project Id
     * @param {String} testId Test Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.remoteUrl (Optional: leave blank for root project) The remote url for remote dependency to test.
     * @param {module:api/ProjectApi~runGitConnectionTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GitConnectionTestResult}
     */
    this.runGitConnectionTest = function(projectId, testId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling runGitConnectionTest");
      }

      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling runGitConnectionTest");
      }


      var pathParams = {
        'project_id': projectId,
        'test_id': testId
      };
      var queryParams = {
        'remote_url': opts['remoteUrl'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GitConnectionTestResult;

      return this.apiClient.callApi(
        '/projects/{project_id}/git_connection_tests/{test_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGitBranch operation.
     * @callback module:api/ProjectApi~updateGitBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GitBranch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Project Git Branch
     * ### Checkout and/or reset --hard an existing Git Branch  Only allowed in development mode   - Call &#x60;update_session&#x60; to select the &#39;dev&#39; workspace.  Checkout an existing branch if name field is different from the name of the currently checked out branch.  Optionally specify a branch name, tag name or commit SHA to which the branch should be reset.   **DANGER** hard reset will be force pushed to the remote. Unsaved changes and commits may be permanently lost.
     * @param {String} projectId Project Id
     * @param {module:model/GitBranch} body Git Branch
     * @param {module:api/ProjectApi~updateGitBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GitBranch}
     */
    this.updateGitBranch = function(projectId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateGitBranch");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGitBranch");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GitBranch;

      return this.apiClient.callApi(
        '/projects/{project_id}/git_branch', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/ProjectApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Project
     * ### Update Project Configuration  Apply changes to a project&#39;s configuration.   #### Configuring Git for a Project  To set up a Looker project with a remote git repository, follow these steps:  1. Call &#x60;update_session&#x60; to select the &#39;dev&#39; workspace. 1. Call &#x60;create_git_deploy_key&#x60; to create a new deploy key for the project 1. Copy the deploy key text into the remote git repository&#39;s ssh key configuration 1. Call &#x60;update_project&#x60; to set project&#39;s &#x60;git_remote_url&#x60; ()and &#x60;git_service_name&#x60;, if necessary).  When you modify a project&#39;s &#x60;git_remote_url&#x60;, Looker connects to the remote repository to fetch metadata. The remote git repository MUST be configured with the Looker-generated deploy key for this project prior to setting the project&#39;s &#x60;git_remote_url&#x60;.  To set up a Looker project with a git repository residing on the Looker server (a &#39;bare&#39; git repo): 1. Call &#x60;update_session&#x60; to select the &#39;dev&#39; workspace. 1. Call &#x60;update_project&#x60; setting &#x60;git_remote_url&#x60; to nil and &#x60;git_service_name&#x60; to \&quot;bare\&quot;.
     * @param {String} projectId Project Id
     * @param {module:model/Project} body Project
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields
     * @param {module:api/ProjectApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.updateProject = function(projectId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateProject");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProject");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/projects/{project_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryCredential operation.
     * @callback module:api/ProjectApi~updateRepositoryCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryCredential} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Repository Credential
     * ### Configure Repository Credential for a remote dependency  Admin required.  &#x60;root_project_id&#x60; is required. &#x60;credential_id&#x60; is required.
     * @param {String} rootProjectId Root Project Id
     * @param {String} credentialId Credential Id
     * @param {module:model/RepositoryCredential} body Remote Project Information
     * @param {module:api/ProjectApi~updateRepositoryCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepositoryCredential}
     */
    this.updateRepositoryCredential = function(rootProjectId, credentialId, body, callback) {
      var postBody = body;

      // verify the required parameter 'rootProjectId' is set
      if (rootProjectId === undefined || rootProjectId === null) {
        throw new Error("Missing the required parameter 'rootProjectId' when calling updateRepositoryCredential");
      }

      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling updateRepositoryCredential");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRepositoryCredential");
      }


      var pathParams = {
        'root_project_id': rootProjectId,
        'credential_id': credentialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RepositoryCredential;

      return this.apiClient.callApi(
        '/projects/{root_project_id}/credential/{credential_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the validateProject operation.
     * @callback module:api/ProjectApi~validateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectValidation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Project
     * ### Validate Project  Performs lint validation of all lookml files in the project. Returns a list of errors found, if any.  Validating the content of all the files in a project can be computationally intensive for large projects. For best performance, call &#x60;validate_project(project_id)&#x60; only when you really want to recompute project validation. To quickly display the results of the most recent project validation (without recomputing), use &#x60;project_validation_results(project_id)&#x60;
     * @param {String} projectId Project Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields
     * @param {module:api/ProjectApi~validateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectValidation}
     */
    this.validateProject = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling validateProject");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProjectValidation;

      return this.apiClient.callApi(
        '/projects/{project_id}/validate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
