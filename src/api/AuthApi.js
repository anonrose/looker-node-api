/**
 * Looker API 3.1 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  This **API 3.1** is in active development. This is where support for new Looker features will appear as non-breaking additions - new functions, new optional parameters on existing functions, or new optional properties in existing types. Additive changes should not impact your existing application code that calls the Looker API. Your existing application code will not be aware of any new Looker API functionality until you choose to upgrade your app to use a newer Looker API client SDK release.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.   ### Examples of new things added in API 3.1:  * Dashboard construction APIs * Themes and custom color collections APIs * Create and run SQL_runner queries * Create and run merged results queries * Create and modify dashboard filters * Create and modify password requirements   ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.   ### Semantic changes in API 3.1:  * `all_looks` no longer includes soft-deleted looks, matching `all_dashboards` behavior. You can find soft-deleted looks using `search_looks` with the `deleted` param set to True. * `all_spaces` no longer includes duplicate items * `search_users` no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, `render_task_results` now returns HTTP status ***202 Accepted*** instead of HTTP status ***102 Processing*** * `all_running_queries` and `kill_query` functions have moved into the `Query` function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.
 *
 * OpenAPI spec version: 3.1.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/LDAPConfig', 'model/LDAPConfigTestResult', 'model/OIDCConfig', 'model/PasswordConfig', 'model/SamlConfig', 'model/SamlMetadataParseResult', 'model/SessionConfig', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/LDAPConfig'), require('../model/LDAPConfigTestResult'), require('../model/OIDCConfig'), require('../model/PasswordConfig'), require('../model/SamlConfig'), require('../model/SamlMetadataParseResult'), require('../model/SessionConfig'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.LookerApi31Reference) {
      root.LookerApi31Reference = {};
    }
    root.LookerApi31Reference.AuthApi = factory(root.LookerApi31Reference.ApiClient, root.LookerApi31Reference.Error, root.LookerApi31Reference.LDAPConfig, root.LookerApi31Reference.LDAPConfigTestResult, root.LookerApi31Reference.OIDCConfig, root.LookerApi31Reference.PasswordConfig, root.LookerApi31Reference.SamlConfig, root.LookerApi31Reference.SamlMetadataParseResult, root.LookerApi31Reference.SessionConfig, root.LookerApi31Reference.ValidationError);
  }
}(this, function(ApiClient, Error, LDAPConfig, LDAPConfigTestResult, OIDCConfig, PasswordConfig, SamlConfig, SamlMetadataParseResult, SessionConfig, ValidationError) {
  'use strict';

  /**
   * Auth service.
   * @module api/AuthApi
   * @version 3.1.0
   */

  /**
   * Constructs a new AuthApi.
   * @alias module:api/AuthApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createOidcTestConfig operation.
     * @callback module:api/AuthApi~createOidcTestConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OIDCConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create OIDC Test Configuration
     * ### Create a OIDC test configuration.
     * @param {module:model/OIDCConfig} body OIDC test config
     * @param {module:api/AuthApi~createOidcTestConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OIDCConfig}
     */
    this.createOidcTestConfig = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createOidcTestConfig");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OIDCConfig;

      return this.apiClient.callApi(
        '/oidc_test_configs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSamlTestConfig operation.
     * @callback module:api/AuthApi~createSamlTestConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SamlConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create SAML Test Configuration
     * ### Create a SAML test configuration.
     * @param {module:model/SamlConfig} body SAML test config
     * @param {module:api/AuthApi~createSamlTestConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SamlConfig}
     */
    this.createSamlTestConfig = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSamlTestConfig");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SamlConfig;

      return this.apiClient.callApi(
        '/saml_test_configs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOidcTestConfig operation.
     * @callback module:api/AuthApi~deleteOidcTestConfigCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete OIDC Test Configuration
     * ### Delete a OIDC test configuration.
     * @param {String} testSlug Slug of test config
     * @param {module:api/AuthApi~deleteOidcTestConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteOidcTestConfig = function(testSlug, callback) {
      var postBody = null;

      // verify the required parameter 'testSlug' is set
      if (testSlug === undefined || testSlug === null) {
        throw new Error("Missing the required parameter 'testSlug' when calling deleteOidcTestConfig");
      }


      var pathParams = {
        'test_slug': testSlug
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/oidc_test_configs/{test_slug}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSamlTestConfig operation.
     * @callback module:api/AuthApi~deleteSamlTestConfigCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete SAML Test Configuration
     * ### Delete a SAML test configuration.
     * @param {String} testSlug Slug of test config
     * @param {module:api/AuthApi~deleteSamlTestConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteSamlTestConfig = function(testSlug, callback) {
      var postBody = null;

      // verify the required parameter 'testSlug' is set
      if (testSlug === undefined || testSlug === null) {
        throw new Error("Missing the required parameter 'testSlug' when calling deleteSamlTestConfig");
      }


      var pathParams = {
        'test_slug': testSlug
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/saml_test_configs/{test_slug}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchAndParseSamlIdpMetadata operation.
     * @callback module:api/AuthApi~fetchAndParseSamlIdpMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SamlMetadataParseResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parse SAML IdP Url
     * ### Fetch the given url and parse it as a SAML IdP metadata document and return the result. Note that this requires that the url be public or at least at a location where the Looker instance can fetch it without requiring any special authentication.
     * @param {String} body SAML IdP metadata public url
     * @param {module:api/AuthApi~fetchAndParseSamlIdpMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SamlMetadataParseResult}
     */
    this.fetchAndParseSamlIdpMetadata = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fetchAndParseSamlIdpMetadata");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['text/plain'];
      var accepts = ['application/json'];
      var returnType = SamlMetadataParseResult;

      return this.apiClient.callApi(
        '/fetch_and_parse_saml_idp_metadata', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the forcePasswordResetAtNextLoginForAllUsers operation.
     * @callback module:api/AuthApi~forcePasswordResetAtNextLoginForAllUsersCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force password reset
     * ### Force all credentials_email users to reset their login passwords upon their next login.
     * @param {module:api/AuthApi~forcePasswordResetAtNextLoginForAllUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.forcePasswordResetAtNextLoginForAllUsers = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/password_config/force_password_reset_at_next_login_for_all_users', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ldapConfig operation.
     * @callback module:api/AuthApi~ldapConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LDAPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get LDAP Configuration
     * ### Get the LDAP configuration.  Looker can be optionally configured to authenticate users against an Active Directory or other LDAP directory server. LDAP setup requires coordination with an administrator of that directory server.  Only Looker administrators can read and update the LDAP configuration.  Configuring LDAP impacts authentication for all users. This configuration should be done carefully.  Looker maintains a single LDAP configuration. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).  LDAP is enabled or disabled for Looker using the **enabled** field.  Looker will never return an **auth_password** field. That value can be set, but never retrieved.  See the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup) for additional information.
     * @param {module:api/AuthApi~ldapConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LDAPConfig}
     */
    this.ldapConfig = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LDAPConfig;

      return this.apiClient.callApi(
        '/ldap_config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the oidcConfig operation.
     * @callback module:api/AuthApi~oidcConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OIDCConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get OIDC Configuration
     * ### Get the OIDC configuration.  Looker can be optionally configured to authenticate users against an OpenID Connect (OIDC) authentication server. OIDC setup requires coordination with an administrator of that server.  Only Looker administrators can read and update the OIDC configuration.  Configuring OIDC impacts authentication for all users. This configuration should be done carefully.  Looker maintains a single OIDC configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).  OIDC is enabled or disabled for Looker using the **enabled** field.
     * @param {module:api/AuthApi~oidcConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OIDCConfig}
     */
    this.oidcConfig = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OIDCConfig;

      return this.apiClient.callApi(
        '/oidc_config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the oidcTestConfig operation.
     * @callback module:api/AuthApi~oidcTestConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OIDCConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get OIDC Test Configuration
     * ### Get a OIDC test configuration by test_slug.
     * @param {String} testSlug Slug of test config
     * @param {module:api/AuthApi~oidcTestConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OIDCConfig}
     */
    this.oidcTestConfig = function(testSlug, callback) {
      var postBody = null;

      // verify the required parameter 'testSlug' is set
      if (testSlug === undefined || testSlug === null) {
        throw new Error("Missing the required parameter 'testSlug' when calling oidcTestConfig");
      }


      var pathParams = {
        'test_slug': testSlug
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OIDCConfig;

      return this.apiClient.callApi(
        '/oidc_test_configs/{test_slug}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the parseSamlIdpMetadata operation.
     * @callback module:api/AuthApi~parseSamlIdpMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SamlMetadataParseResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parse SAML IdP XML
     * ### Parse the given xml as a SAML IdP metadata document and return the result.
     * @param {String} body SAML IdP metadata xml
     * @param {module:api/AuthApi~parseSamlIdpMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SamlMetadataParseResult}
     */
    this.parseSamlIdpMetadata = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling parseSamlIdpMetadata");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['text/plain'];
      var accepts = ['application/json'];
      var returnType = SamlMetadataParseResult;

      return this.apiClient.callApi(
        '/parse_saml_idp_metadata', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordConfig operation.
     * @callback module:api/AuthApi~passwordConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Password Config
     * ### Get password config.
     * @param {module:api/AuthApi~passwordConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordConfig}
     */
    this.passwordConfig = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PasswordConfig;

      return this.apiClient.callApi(
        '/password_config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the samlConfig operation.
     * @callback module:api/AuthApi~samlConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SamlConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get SAML Configuration
     * ### Get the SAML configuration.  Looker can be optionally configured to authenticate users against a SAML authentication server. SAML setup requires coordination with an administrator of that server.  Only Looker administrators can read and update the SAML configuration.  Configuring SAML impacts authentication for all users. This configuration should be done carefully.  Looker maintains a single SAML configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).  SAML is enabled or disabled for Looker using the **enabled** field.
     * @param {module:api/AuthApi~samlConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SamlConfig}
     */
    this.samlConfig = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SamlConfig;

      return this.apiClient.callApi(
        '/saml_config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the samlTestConfig operation.
     * @callback module:api/AuthApi~samlTestConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SamlConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get SAML Test Configuration
     * ### Get a SAML test configuration by test_slug.
     * @param {String} testSlug Slug of test config
     * @param {module:api/AuthApi~samlTestConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SamlConfig}
     */
    this.samlTestConfig = function(testSlug, callback) {
      var postBody = null;

      // verify the required parameter 'testSlug' is set
      if (testSlug === undefined || testSlug === null) {
        throw new Error("Missing the required parameter 'testSlug' when calling samlTestConfig");
      }


      var pathParams = {
        'test_slug': testSlug
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SamlConfig;

      return this.apiClient.callApi(
        '/saml_test_configs/{test_slug}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionConfig operation.
     * @callback module:api/AuthApi~sessionConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Session Config
     * ### Get session config.
     * @param {module:api/AuthApi~sessionConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionConfig}
     */
    this.sessionConfig = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SessionConfig;

      return this.apiClient.callApi(
        '/session_config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testLdapConfigAuth operation.
     * @callback module:api/AuthApi~testLdapConfigAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LDAPConfigTestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test LDAP Auth
     * ### Test the connection authentication settings for an LDAP configuration.  This tests that the connection is possible and that a &#39;server&#39; account to be used by Looker can       authenticate to the LDAP server given connection and authentication information.  **connection_host**, **connection_port**, and **auth_username**, are required.       **connection_tls** and **auth_password** are optional.  Example: &#x60;&#x60;&#x60;json {   \&quot;connection_host\&quot;: \&quot;ldap.example.com\&quot;,   \&quot;connection_port\&quot;: \&quot;636\&quot;,   \&quot;connection_tls\&quot;: true,   \&quot;auth_username\&quot;: \&quot;cn&#x3D;looker,dc&#x3D;example,dc&#x3D;com\&quot;,   \&quot;auth_password\&quot;: \&quot;secret\&quot; } &#x60;&#x60;&#x60;  Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.  The active LDAP settings are not modified.
     * @param {module:model/LDAPConfig} body LDAP Config
     * @param {module:api/AuthApi~testLdapConfigAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LDAPConfigTestResult}
     */
    this.testLdapConfigAuth = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling testLdapConfigAuth");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LDAPConfigTestResult;

      return this.apiClient.callApi(
        '/ldap_config/test_auth', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testLdapConfigConnection operation.
     * @callback module:api/AuthApi~testLdapConfigConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LDAPConfigTestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test LDAP Connection
     * ### Test the connection settings for an LDAP configuration.  This tests that the connection is possible given a connection_host and connection_port.  **connection_host** and **connection_port** are required. **connection_tls** is optional.  Example: &#x60;&#x60;&#x60;json {   \&quot;connection_host\&quot;: \&quot;ldap.example.com\&quot;,   \&quot;connection_port\&quot;: \&quot;636\&quot;,   \&quot;connection_tls\&quot;: true } &#x60;&#x60;&#x60;  No authentication to the LDAP server is attempted.  The active LDAP settings are not modified.
     * @param {module:model/LDAPConfig} body LDAP Config
     * @param {module:api/AuthApi~testLdapConfigConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LDAPConfigTestResult}
     */
    this.testLdapConfigConnection = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling testLdapConfigConnection");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LDAPConfigTestResult;

      return this.apiClient.callApi(
        '/ldap_config/test_connection', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testLdapConfigUserAuth operation.
     * @callback module:api/AuthApi~testLdapConfigUserAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LDAPConfigTestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test LDAP User Auth
     * ### Test the user authentication settings for an LDAP configuration.  This test accepts a full LDAP configuration along with a username/password pair and attempts to       authenticate the user with the LDAP server. The configuration is validated before attempting the       authentication.  Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.  **test_ldap_user** and **test_ldap_password** are required.  The active LDAP settings are not modified.
     * @param {module:model/LDAPConfig} body LDAP Config
     * @param {module:api/AuthApi~testLdapConfigUserAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LDAPConfigTestResult}
     */
    this.testLdapConfigUserAuth = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling testLdapConfigUserAuth");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LDAPConfigTestResult;

      return this.apiClient.callApi(
        '/ldap_config/test_user_auth', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testLdapConfigUserInfo operation.
     * @callback module:api/AuthApi~testLdapConfigUserInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LDAPConfigTestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test LDAP User Info
     * ### Test the user authentication settings for an LDAP configuration without authenticating the user.  This test will let you easily test the mapping for user properties and roles for any user without      needing to authenticate as that user.  This test accepts a full LDAP configuration along with a username and attempts to find the full info      for the user from the LDAP server without actually authenticating the user. So, user password is not      required.The configuration is validated before attempting to contact the server.  **test_ldap_user** is required.  The active LDAP settings are not modified.
     * @param {module:model/LDAPConfig} body LDAP Config
     * @param {module:api/AuthApi~testLdapConfigUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LDAPConfigTestResult}
     */
    this.testLdapConfigUserInfo = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling testLdapConfigUserInfo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LDAPConfigTestResult;

      return this.apiClient.callApi(
        '/ldap_config/test_user_info', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLdapConfig operation.
     * @callback module:api/AuthApi~updateLdapConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LDAPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update LDAP Configuration
     * ### Update the LDAP configuration.  Configuring LDAP impacts authentication for all users. This configuration should be done carefully.  Only Looker administrators can read and update the LDAP configuration.  LDAP is enabled or disabled for Looker using the **enabled** field.  It is **highly** recommended that any LDAP setting changes be tested using the APIs below before being set globally.  See the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup) for additional information.
     * @param {module:model/LDAPConfig} body LDAP Config
     * @param {module:api/AuthApi~updateLdapConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LDAPConfig}
     */
    this.updateLdapConfig = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLdapConfig");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LDAPConfig;

      return this.apiClient.callApi(
        '/ldap_config', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOidcConfig operation.
     * @callback module:api/AuthApi~updateOidcConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OIDCConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update OIDC Configuration
     * ### Update the OIDC configuration.  Configuring OIDC impacts authentication for all users. This configuration should be done carefully.  Only Looker administrators can read and update the OIDC configuration.  OIDC is enabled or disabled for Looker using the **enabled** field.  It is **highly** recommended that any OIDC setting changes be tested using the APIs below before being set globally.
     * @param {module:model/OIDCConfig} body OIDC Config
     * @param {module:api/AuthApi~updateOidcConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OIDCConfig}
     */
    this.updateOidcConfig = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateOidcConfig");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OIDCConfig;

      return this.apiClient.callApi(
        '/oidc_config', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePasswordConfig operation.
     * @callback module:api/AuthApi~updatePasswordConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Password Config
     * ### Update password config.
     * @param {module:model/PasswordConfig} body Password Config
     * @param {module:api/AuthApi~updatePasswordConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordConfig}
     */
    this.updatePasswordConfig = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePasswordConfig");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PasswordConfig;

      return this.apiClient.callApi(
        '/password_config', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSamlConfig operation.
     * @callback module:api/AuthApi~updateSamlConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SamlConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update SAML Configuration
     * ### Update the SAML configuration.  Configuring SAML impacts authentication for all users. This configuration should be done carefully.  Only Looker administrators can read and update the SAML configuration.  SAML is enabled or disabled for Looker using the **enabled** field.  It is **highly** recommended that any SAML setting changes be tested using the APIs below before being set globally.
     * @param {module:model/SamlConfig} body SAML Config
     * @param {module:api/AuthApi~updateSamlConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SamlConfig}
     */
    this.updateSamlConfig = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSamlConfig");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SamlConfig;

      return this.apiClient.callApi(
        '/saml_config', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSessionConfig operation.
     * @callback module:api/AuthApi~updateSessionConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Session Config
     * ### Update session config.
     * @param {module:model/SessionConfig} body Session Config
     * @param {module:api/AuthApi~updateSessionConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionConfig}
     */
    this.updateSessionConfig = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSessionConfig");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SessionConfig;

      return this.apiClient.callApi(
        '/session_config', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
