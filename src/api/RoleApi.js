/**
 * Looker API 3.1 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  This **API 3.1** is in active development. This is where support for new Looker features will appear as non-breaking additions - new functions, new optional parameters on existing functions, or new optional properties in existing types. Additive changes should not impact your existing application code that calls the Looker API. Your existing application code will not be aware of any new Looker API functionality until you choose to upgrade your app to use a newer Looker API client SDK release.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.   ### Examples of new things added in API 3.1:  * Dashboard construction APIs * Themes and custom color collections APIs * Create and run SQL_runner queries * Create and run merged results queries * Create and modify dashboard filters * Create and modify password requirements   ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.   ### Semantic changes in API 3.1:  * `all_looks` no longer includes soft-deleted looks, matching `all_dashboards` behavior. You can find soft-deleted looks using `search_looks` with the `deleted` param set to True. * `all_spaces` no longer includes duplicate items * `search_users` no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, `render_task_results` now returns HTTP status ***202 Accepted*** instead of HTTP status ***102 Processing*** * `all_running_queries` and `kill_query` functions have moved into the `Query` function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.
 *
 * OpenAPI spec version: 3.1.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Group', 'model/ModelSet', 'model/Permission', 'model/PermissionSet', 'model/Role', 'model/User', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Group'), require('../model/ModelSet'), require('../model/Permission'), require('../model/PermissionSet'), require('../model/Role'), require('../model/User'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.LookerApi31Reference) {
      root.LookerApi31Reference = {};
    }
    root.LookerApi31Reference.RoleApi = factory(root.LookerApi31Reference.ApiClient, root.LookerApi31Reference.Error, root.LookerApi31Reference.Group, root.LookerApi31Reference.ModelSet, root.LookerApi31Reference.Permission, root.LookerApi31Reference.PermissionSet, root.LookerApi31Reference.Role, root.LookerApi31Reference.User, root.LookerApi31Reference.ValidationError);
  }
}(this, function(ApiClient, Error, Group, ModelSet, Permission, PermissionSet, Role, User, ValidationError) {
  'use strict';

  /**
   * Role service.
   * @module api/RoleApi
   * @version 3.1.0
   */

  /**
   * Constructs a new RoleApi.
   * @alias module:api/RoleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the allModelSets operation.
     * @callback module:api/RoleApi~allModelSetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelSet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Model Sets
     * ### Get information about all model sets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/RoleApi~allModelSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelSet>}
     */
    this.allModelSets = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ModelSet];

      return this.apiClient.callApi(
        '/model_sets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the allPermissionSets operation.
     * @callback module:api/RoleApi~allPermissionSetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PermissionSet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Permission Sets
     * ### Get information about all permission sets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/RoleApi~allPermissionSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PermissionSet>}
     */
    this.allPermissionSets = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PermissionSet];

      return this.apiClient.callApi(
        '/permission_sets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the allPermissions operation.
     * @callback module:api/RoleApi~allPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Permission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Permissions
     * ### Get all supported permissions.
     * @param {module:api/RoleApi~allPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Permission>}
     */
    this.allPermissions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Permission];

      return this.apiClient.callApi(
        '/permissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the allRoles operation.
     * @callback module:api/RoleApi~allRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Roles
     * ### Get information about all roles.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {Array.<Number>} opts.ids Optional list of ids to get specific roles.
     * @param {module:api/RoleApi~allRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    this.allRoles = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Role];

      return this.apiClient.callApi(
        '/roles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelSet operation.
     * @callback module:api/RoleApi~createModelSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Model Set
     * ### Create a model set with the specified information. Model sets are used by Roles.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModelSet} opts.body ModelSet
     * @param {module:api/RoleApi~createModelSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelSet}
     */
    this.createModelSet = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelSet;

      return this.apiClient.callApi(
        '/model_sets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPermissionSet operation.
     * @callback module:api/RoleApi~createPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Permission Set
     * ### Create a permission set with the specified information. Permission sets are used by Roles.
     * @param {Object} opts Optional parameters
     * @param {module:model/PermissionSet} opts.body Permission Set
     * @param {module:api/RoleApi~createPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionSet}
     */
    this.createPermissionSet = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PermissionSet;

      return this.apiClient.callApi(
        '/permission_sets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRole operation.
     * @callback module:api/RoleApi~createRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Role
     * ### Create a role with the specified information.
     * @param {Object} opts Optional parameters
     * @param {module:model/Role} opts.body Role
     * @param {module:api/RoleApi~createRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.createRole = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/roles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelSet operation.
     * @callback module:api/RoleApi~deleteModelSetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Model Set
     * ### Delete the model set with a specific id.
     * @param {Number} modelSetId id of model set
     * @param {module:api/RoleApi~deleteModelSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteModelSet = function(modelSetId, callback) {
      var postBody = null;

      // verify the required parameter 'modelSetId' is set
      if (modelSetId === undefined || modelSetId === null) {
        throw new Error("Missing the required parameter 'modelSetId' when calling deleteModelSet");
      }


      var pathParams = {
        'model_set_id': modelSetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/model_sets/{model_set_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionSet operation.
     * @callback module:api/RoleApi~deletePermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Permission Set
     * ### Delete the permission set with a specific id.
     * @param {Number} permissionSetId Id of permission set
     * @param {module:api/RoleApi~deletePermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deletePermissionSet = function(permissionSetId, callback) {
      var postBody = null;

      // verify the required parameter 'permissionSetId' is set
      if (permissionSetId === undefined || permissionSetId === null) {
        throw new Error("Missing the required parameter 'permissionSetId' when calling deletePermissionSet");
      }


      var pathParams = {
        'permission_set_id': permissionSetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/permission_sets/{permission_set_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRole operation.
     * @callback module:api/RoleApi~deleteRoleCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Role
     * ### Delete the role with a specific id.
     * @param {Number} roleId id of role
     * @param {module:api/RoleApi~deleteRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteRole = function(roleId, callback) {
      var postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling deleteRole");
      }


      var pathParams = {
        'role_id': roleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/roles/{role_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modelSet operation.
     * @callback module:api/RoleApi~modelSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Model Set
     * ### Get information about the model set with a specific id.
     * @param {Number} modelSetId Id of model set
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/RoleApi~modelSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelSet}
     */
    this.modelSet = function(modelSetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'modelSetId' is set
      if (modelSetId === undefined || modelSetId === null) {
        throw new Error("Missing the required parameter 'modelSetId' when calling modelSet");
      }


      var pathParams = {
        'model_set_id': modelSetId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelSet;

      return this.apiClient.callApi(
        '/model_sets/{model_set_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionSet operation.
     * @callback module:api/RoleApi~permissionSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Permission Set
     * ### Get information about the permission set with a specific id.
     * @param {Number} permissionSetId Id of permission set
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/RoleApi~permissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionSet}
     */
    this.permissionSet = function(permissionSetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'permissionSetId' is set
      if (permissionSetId === undefined || permissionSetId === null) {
        throw new Error("Missing the required parameter 'permissionSetId' when calling permissionSet");
      }


      var pathParams = {
        'permission_set_id': permissionSetId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PermissionSet;

      return this.apiClient.callApi(
        '/permission_sets/{permission_set_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the role operation.
     * @callback module:api/RoleApi~roleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Role
     * ### Get information about the role with a specific id.
     * @param {Number} roleId id of role
     * @param {module:api/RoleApi~roleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.role = function(roleId, callback) {
      var postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling role");
      }


      var pathParams = {
        'role_id': roleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/roles/{role_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the roleGroups operation.
     * @callback module:api/RoleApi~roleGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Role Groups
     * ### Get information about all the groups with the role that has a specific id.
     * @param {Number} roleId id of role
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/RoleApi~roleGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    this.roleGroups = function(roleId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling roleGroups");
      }


      var pathParams = {
        'role_id': roleId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Group];

      return this.apiClient.callApi(
        '/roles/{role_id}/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the roleUsers operation.
     * @callback module:api/RoleApi~roleUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Role Users
     * ### Get information about all the users with the role that has a specific id.
     * @param {Number} roleId id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {Boolean} opts.directAssociationOnly Get only users associated directly with the role: exclude those only associated through groups.
     * @param {module:api/RoleApi~roleUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.roleUsers = function(roleId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling roleUsers");
      }


      var pathParams = {
        'role_id': roleId
      };
      var queryParams = {
        'fields': opts['fields'],
        'direct_association_only': opts['directAssociationOnly'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/roles/{role_id}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setRoleGroups operation.
     * @callback module:api/RoleApi~setRoleGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Role Groups
     * ### Set all groups for a role, removing all existing group associations from that role.
     * @param {Number} roleId Id of Role
     * @param {Array.<module:model/Number>} body Array of Group Ids
     * @param {module:api/RoleApi~setRoleGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    this.setRoleGroups = function(roleId, body, callback) {
      var postBody = body;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling setRoleGroups");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setRoleGroups");
      }


      var pathParams = {
        'role_id': roleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Group];

      return this.apiClient.callApi(
        '/roles/{role_id}/groups', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setRoleUsers operation.
     * @callback module:api/RoleApi~setRoleUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Role Users
     * ### Set all the users of the role with a specific id.
     * @param {Number} roleId id of role
     * @param {Array.<module:model/Number>} body array of user ids for role
     * @param {module:api/RoleApi~setRoleUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.setRoleUsers = function(roleId, body, callback) {
      var postBody = body;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling setRoleUsers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setRoleUsers");
      }


      var pathParams = {
        'role_id': roleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/roles/{role_id}/users', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelSet operation.
     * @callback module:api/RoleApi~updateModelSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Model Set
     * ### Update information about the model set with a specific id.
     * @param {Number} modelSetId id of model set
     * @param {module:model/ModelSet} body ModelSet
     * @param {module:api/RoleApi~updateModelSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelSet}
     */
    this.updateModelSet = function(modelSetId, body, callback) {
      var postBody = body;

      // verify the required parameter 'modelSetId' is set
      if (modelSetId === undefined || modelSetId === null) {
        throw new Error("Missing the required parameter 'modelSetId' when calling updateModelSet");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateModelSet");
      }


      var pathParams = {
        'model_set_id': modelSetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelSet;

      return this.apiClient.callApi(
        '/model_sets/{model_set_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePermissionSet operation.
     * @callback module:api/RoleApi~updatePermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Permission Set
     * ### Update information about the permission set with a specific id.
     * @param {Number} permissionSetId id of permission set
     * @param {module:model/PermissionSet} body Permission Set
     * @param {module:api/RoleApi~updatePermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionSet}
     */
    this.updatePermissionSet = function(permissionSetId, body, callback) {
      var postBody = body;

      // verify the required parameter 'permissionSetId' is set
      if (permissionSetId === undefined || permissionSetId === null) {
        throw new Error("Missing the required parameter 'permissionSetId' when calling updatePermissionSet");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePermissionSet");
      }


      var pathParams = {
        'permission_set_id': permissionSetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PermissionSet;

      return this.apiClient.callApi(
        '/permission_sets/{permission_set_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRole operation.
     * @callback module:api/RoleApi~updateRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Role
     * ### Update information about the role with a specific id.
     * @param {Number} roleId id of role
     * @param {module:model/Role} body Role
     * @param {module:api/RoleApi~updateRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.updateRole = function(roleId, body, callback) {
      var postBody = body;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling updateRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRole");
      }


      var pathParams = {
        'role_id': roleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/roles/{role_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
