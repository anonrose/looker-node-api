/**
 * Looker API 3.1 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  This **API 3.1** is in active development. This is where support for new Looker features will appear as non-breaking additions - new functions, new optional parameters on existing functions, or new optional properties in existing types. Additive changes should not impact your existing application code that calls the Looker API. Your existing application code will not be aware of any new Looker API functionality until you choose to upgrade your app to use a newer Looker API client SDK release.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.   ### Examples of new things added in API 3.1:  * Dashboard construction APIs * Themes and custom color collections APIs * Create and run SQL_runner queries * Create and run merged results queries * Create and modify dashboard filters * Create and modify password requirements   ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.   ### Semantic changes in API 3.1:  * `all_looks` no longer includes soft-deleted looks, matching `all_dashboards` behavior. You can find soft-deleted looks using `search_looks` with the `deleted` param set to True. * `all_spaces` no longer includes duplicate items * `search_users` no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, `render_task_results` now returns HTTP status ***202 Accepted*** instead of HTTP status ***102 Processing*** * `all_running_queries` and `kill_query` functions have moved into the `Query` function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.
 *
 * OpenAPI spec version: 3.1.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CredentialsApi3', 'model/CredentialsEmail', 'model/CredentialsEmbed', 'model/CredentialsGoogle', 'model/CredentialsLDAP', 'model/CredentialsLookerOpenid', 'model/CredentialsOIDC', 'model/CredentialsSaml', 'model/CredentialsTotp', 'model/Error', 'model/Role', 'model/Session', 'model/User', 'model/UserAttributeWithValue', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CredentialsApi3'), require('../model/CredentialsEmail'), require('../model/CredentialsEmbed'), require('../model/CredentialsGoogle'), require('../model/CredentialsLDAP'), require('../model/CredentialsLookerOpenid'), require('../model/CredentialsOIDC'), require('../model/CredentialsSaml'), require('../model/CredentialsTotp'), require('../model/Error'), require('../model/Role'), require('../model/Session'), require('../model/User'), require('../model/UserAttributeWithValue'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.LookerApi31Reference) {
      root.LookerApi31Reference = {};
    }
    root.LookerApi31Reference.UserApi = factory(root.LookerApi31Reference.ApiClient, root.LookerApi31Reference.CredentialsApi3, root.LookerApi31Reference.CredentialsEmail, root.LookerApi31Reference.CredentialsEmbed, root.LookerApi31Reference.CredentialsGoogle, root.LookerApi31Reference.CredentialsLDAP, root.LookerApi31Reference.CredentialsLookerOpenid, root.LookerApi31Reference.CredentialsOIDC, root.LookerApi31Reference.CredentialsSaml, root.LookerApi31Reference.CredentialsTotp, root.LookerApi31Reference.Error, root.LookerApi31Reference.Role, root.LookerApi31Reference.Session, root.LookerApi31Reference.User, root.LookerApi31Reference.UserAttributeWithValue, root.LookerApi31Reference.ValidationError);
  }
}(this, function(ApiClient, CredentialsApi3, CredentialsEmail, CredentialsEmbed, CredentialsGoogle, CredentialsLDAP, CredentialsLookerOpenid, CredentialsOIDC, CredentialsSaml, CredentialsTotp, Error, Role, Session, User, UserAttributeWithValue, ValidationError) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 3.1.0
   */

  /**
   * Constructs a new UserApi.
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the allUserCredentialsApi3s operation.
     * @callback module:api/UserApi~allUserCredentialsApi3sCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CredentialsApi3>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All API 3 Credentials
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~allUserCredentialsApi3sCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CredentialsApi3>}
     */
    this.allUserCredentialsApi3s = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling allUserCredentialsApi3s");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CredentialsApi3];

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_api3', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the allUserCredentialsEmbeds operation.
     * @callback module:api/UserApi~allUserCredentialsEmbedsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CredentialsEmbed>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Embedding Credentials
     * ### Embed login information for the specified user.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~allUserCredentialsEmbedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CredentialsEmbed>}
     */
    this.allUserCredentialsEmbeds = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling allUserCredentialsEmbeds");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CredentialsEmbed];

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_embed', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the allUserSessions operation.
     * @callback module:api/UserApi~allUserSessionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Session>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Web Login Sessions
     * ### Web login session for the specified user.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~allUserSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Session>}
     */
    this.allUserSessions = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling allUserSessions");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Session];

      return this.apiClient.callApi(
        '/users/{user_id}/sessions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the allUsers operation.
     * @callback module:api/UserApi~allUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Users
     * ### Get information about all users.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {Number} opts.page Requested page.
     * @param {Number} opts.perPage Results per page.
     * @param {String} opts.sorts Fields to sort by.
     * @param {Array.<Number>} opts.ids Optional list of ids to get specific users.
     * @param {module:api/UserApi~allUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.allUsers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sorts': opts['sorts'],
      };
      var collectionQueryParams = {
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UserApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * ### Create a user with the specified information.
     * @param {Object} opts Optional parameters
     * @param {module:model/User} opts.body User
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.createUser = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserCredentialsApi3 operation.
     * @callback module:api/UserApi~createUserCredentialsApi3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsApi3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create API 3 Credential
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {module:model/CredentialsApi3} opts.body API 3 Credential
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~createUserCredentialsApi3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsApi3}
     */
    this.createUserCredentialsApi3 = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createUserCredentialsApi3");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsApi3;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_api3', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserCredentialsEmail operation.
     * @callback module:api/UserApi~createUserCredentialsEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Email/Password Credential
     * ### Email/password login information for the specified user.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {module:model/CredentialsEmail} opts.body Email/Password Credential
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~createUserCredentialsEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsEmail}
     */
    this.createUserCredentialsEmail = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createUserCredentialsEmail");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsEmail;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_email', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserCredentialsEmailPasswordReset operation.
     * @callback module:api/UserApi~createUserCredentialsEmailPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Password Reset Token
     * ### Create a password reset token. This will create a cryptographically secure random password reset token for the user. If the user already has a password reset token then this invalidates the old token and creates a new one. The token is expressed as the &#39;password_reset_url&#39; of the user&#39;s email/password credential object. This takes an optional &#39;expires&#39; param to indicate if the new token should be an expiring token. Tokens that expire are typically used for self-service password resets for existing users. Invitation emails for new users typically are not set to expire. The expire period is always 60 minutes when expires is enabled. This method can be called with an empty body.
     * @param {Number} userId Id of user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.expires Expiring token.
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~createUserCredentialsEmailPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsEmail}
     */
    this.createUserCredentialsEmailPasswordReset = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createUserCredentialsEmailPasswordReset");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'expires': opts['expires'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsEmail;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_email/password_reset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserCredentialsTotp operation.
     * @callback module:api/UserApi~createUserCredentialsTotpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsTotp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Two-Factor Credential
     * ### Two-factor login information for the specified user.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {module:model/CredentialsTotp} opts.body Two-Factor Credential
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~createUserCredentialsTotpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsTotp}
     */
    this.createUserCredentialsTotp = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createUserCredentialsTotp");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsTotp;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_totp', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UserApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User
     * ### Delete the user with a specific id.  **DANGER** this will delete the user and all looks and other information owned by the user.
     * @param {Number} userId Id of user
     * @param {module:api/UserApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteUser = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/users/{user_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserAttributeUserValue operation.
     * @callback module:api/UserApi~deleteUserAttributeUserValueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User Attribute User Value
     * ### Delete a user attribute value from a user&#39;s account settings.  After the user attribute value is deleted from the user&#39;s account settings, subsequent requests for the user attribute value for this user will draw from the user&#39;s groups or the default value of the user attribute. See [Get User Attribute Values](#!/User/user_attribute_user_values) for more information about how user attribute values are resolved.
     * @param {Number} userId Id of user
     * @param {Number} userAttributeId Id of user attribute
     * @param {module:api/UserApi~deleteUserAttributeUserValueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUserAttributeUserValue = function(userId, userAttributeId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserAttributeUserValue");
      }

      // verify the required parameter 'userAttributeId' is set
      if (userAttributeId === undefined || userAttributeId === null) {
        throw new Error("Missing the required parameter 'userAttributeId' when calling deleteUserAttributeUserValue");
      }


      var pathParams = {
        'user_id': userId,
        'user_attribute_id': userAttributeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/attribute_values/{user_attribute_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserCredentialsApi3 operation.
     * @callback module:api/UserApi~deleteUserCredentialsApi3Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete API 3 Credential
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param {Number} userId id of user
     * @param {Number} credentialsApi3Id id of API 3 Credential
     * @param {module:api/UserApi~deleteUserCredentialsApi3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteUserCredentialsApi3 = function(userId, credentialsApi3Id, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserCredentialsApi3");
      }

      // verify the required parameter 'credentialsApi3Id' is set
      if (credentialsApi3Id === undefined || credentialsApi3Id === null) {
        throw new Error("Missing the required parameter 'credentialsApi3Id' when calling deleteUserCredentialsApi3");
      }


      var pathParams = {
        'user_id': userId,
        'credentials_api3_id': credentialsApi3Id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_api3/{credentials_api3_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserCredentialsEmail operation.
     * @callback module:api/UserApi~deleteUserCredentialsEmailCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Email/Password Credential
     * ### Email/password login information for the specified user.
     * @param {Number} userId id of user
     * @param {module:api/UserApi~deleteUserCredentialsEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteUserCredentialsEmail = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserCredentialsEmail");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_email', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserCredentialsEmbed operation.
     * @callback module:api/UserApi~deleteUserCredentialsEmbedCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Embedding Credential
     * ### Embed login information for the specified user.
     * @param {Number} userId id of user
     * @param {Number} credentialsEmbedId id of Embedding Credential
     * @param {module:api/UserApi~deleteUserCredentialsEmbedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteUserCredentialsEmbed = function(userId, credentialsEmbedId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserCredentialsEmbed");
      }

      // verify the required parameter 'credentialsEmbedId' is set
      if (credentialsEmbedId === undefined || credentialsEmbedId === null) {
        throw new Error("Missing the required parameter 'credentialsEmbedId' when calling deleteUserCredentialsEmbed");
      }


      var pathParams = {
        'user_id': userId,
        'credentials_embed_id': credentialsEmbedId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_embed/{credentials_embed_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserCredentialsGoogle operation.
     * @callback module:api/UserApi~deleteUserCredentialsGoogleCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Google Auth Credential
     * ### Google authentication login information for the specified user.
     * @param {Number} userId id of user
     * @param {module:api/UserApi~deleteUserCredentialsGoogleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteUserCredentialsGoogle = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserCredentialsGoogle");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_google', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserCredentialsLdap operation.
     * @callback module:api/UserApi~deleteUserCredentialsLdapCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete LDAP Credential
     * ### LDAP login information for the specified user.
     * @param {Number} userId id of user
     * @param {module:api/UserApi~deleteUserCredentialsLdapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteUserCredentialsLdap = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserCredentialsLdap");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_ldap', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserCredentialsLookerOpenid operation.
     * @callback module:api/UserApi~deleteUserCredentialsLookerOpenidCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Looker OpenId Credential
     * ### Looker Openid login information for the specified user. Used by Looker Analysts.
     * @param {Number} userId id of user
     * @param {module:api/UserApi~deleteUserCredentialsLookerOpenidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteUserCredentialsLookerOpenid = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserCredentialsLookerOpenid");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_looker_openid', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserCredentialsOidc operation.
     * @callback module:api/UserApi~deleteUserCredentialsOidcCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete OIDC Auth Credential
     * ### OpenID Connect (OIDC) authentication login information for the specified user.
     * @param {Number} userId id of user
     * @param {module:api/UserApi~deleteUserCredentialsOidcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteUserCredentialsOidc = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserCredentialsOidc");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_oidc', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserCredentialsSaml operation.
     * @callback module:api/UserApi~deleteUserCredentialsSamlCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Saml Auth Credential
     * ### Saml authentication login information for the specified user.
     * @param {Number} userId id of user
     * @param {module:api/UserApi~deleteUserCredentialsSamlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteUserCredentialsSaml = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserCredentialsSaml");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_saml', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserCredentialsTotp operation.
     * @callback module:api/UserApi~deleteUserCredentialsTotpCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Two-Factor Credential
     * ### Two-factor login information for the specified user.
     * @param {Number} userId id of user
     * @param {module:api/UserApi~deleteUserCredentialsTotpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteUserCredentialsTotp = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserCredentialsTotp");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_totp', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserSession operation.
     * @callback module:api/UserApi~deleteUserSessionCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Web Login Session
     * ### Web login session for the specified user.
     * @param {Number} userId id of user
     * @param {Number} sessionId id of Web Login Session
     * @param {module:api/UserApi~deleteUserSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteUserSession = function(userId, sessionId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserSession");
      }

      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling deleteUserSession");
      }


      var pathParams = {
        'user_id': userId,
        'session_id': sessionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/users/{user_id}/sessions/{session_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the me operation.
     * @callback module:api/UserApi~meCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Current User
     * ### Get information about the current user; i.e. the user account currently calling the API.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~meCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.me = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsers operation.
     * @callback module:api/UserApi~searchUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Users
     * ### Search users  Returns all&lt;sup&gt;*&lt;/sup&gt; user records that match the given search criteria.  If multiple search params are given and &#x60;filter_or&#x60; is FALSE or not specified, search params are combined in a logical AND operation. Only rows that match *all* search param criteria will be returned.  If &#x60;filter_or&#x60; is TRUE, multiple search params are combined in a logical OR operation. Results will include rows that match **any** of the search criteria.  String search params use case-insensitive matching. String search params can contain &#x60;%&#x60; and &#39;_&#39; as SQL LIKE pattern match wildcard expressions. example&#x3D;\&quot;dan%\&quot; will match \&quot;danger\&quot; and \&quot;Danzig\&quot; but not \&quot;David\&quot; example&#x3D;\&quot;D_m%\&quot; will match \&quot;Damage\&quot; and \&quot;dump\&quot;  Integer search params can accept a single value or a comma separated list of values. The multiple values will be combined under a logical OR operation - results will match at least one of the given values.  Most search params can accept \&quot;IS NULL\&quot; and \&quot;NOT NULL\&quot; as special expressions to match or exclude (respectively) rows where the column is null.  Boolean search params accept only \&quot;true\&quot; and \&quot;false\&quot; as values.   (&lt;sup&gt;*&lt;/sup&gt;) Results are always filtered to the level of information the caller is permitted to view. Looker admins can see all user details; normal users in an open system can see names of other users but no details; normal users in a closed system can only see names of other users who are members of the same group as the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Include only these fields in the response
     * @param {Number} opts.page Return only page N of paginated results
     * @param {Number} opts.perPage Return N rows of data per page
     * @param {String} opts.sorts Fields to sort by.
     * @param {Number} opts.id Match User Id.
     * @param {String} opts.firstName Match First name.
     * @param {String} opts.lastName Match Last name.
     * @param {Boolean} opts.verifiedLookerEmployee Search for user accounts associated with Looker employees
     * @param {String} opts.email Search for the user with this email address
     * @param {Boolean} opts.isDisabled Search for disabled user accounts
     * @param {Boolean} opts.filterOr Combine given search criteria in a boolean OR expression
     * @param {Number} opts.contentMetadataId Search for users who have access to this content_metadata item
     * @param {Number} opts.groupId Search for users who are direct members of this group
     * @param {module:api/UserApi~searchUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.searchUsers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sorts': opts['sorts'],
        'id': opts['id'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'verified_looker_employee': opts['verifiedLookerEmployee'],
        'email': opts['email'],
        'is_disabled': opts['isDisabled'],
        'filter_or': opts['filterOr'],
        'content_metadata_id': opts['contentMetadataId'],
        'group_id': opts['groupId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/users/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsersNames operation.
     * @callback module:api/UserApi~searchUsersNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search User Names
     * ### Search for user accounts by name  Returns all user accounts where &#x60;first_name&#x60; OR &#x60;last_name&#x60; OR &#x60;email&#x60; field values match a pattern. The pattern can contain &#x60;%&#x60; and &#x60;_&#x60; wildcards as in SQL LIKE expressions.  Any additional search params will be combined into a logical AND expression.
     * @param {String} pattern Pattern to match
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Include only these fields in the response
     * @param {Number} opts.page Return only page N of paginated results
     * @param {Number} opts.perPage Return N rows of data per page
     * @param {String} opts.sorts Fields to sort by
     * @param {Number} opts.id Match User Id
     * @param {String} opts.firstName Match First name
     * @param {String} opts.lastName Match Last name
     * @param {Boolean} opts.verifiedLookerEmployee Match Verified Looker employee
     * @param {String} opts.email Match Email Address
     * @param {Boolean} opts.isDisabled Include or exclude disabled accounts in the results
     * @param {module:api/UserApi~searchUsersNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.searchUsersNames = function(pattern, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'pattern' is set
      if (pattern === undefined || pattern === null) {
        throw new Error("Missing the required parameter 'pattern' when calling searchUsersNames");
      }


      var pathParams = {
        'pattern': pattern
      };
      var queryParams = {
        'fields': opts['fields'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sorts': opts['sorts'],
        'id': opts['id'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'verified_looker_employee': opts['verifiedLookerEmployee'],
        'email': opts['email'],
        'is_disabled': opts['isDisabled'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/users/search/names/{pattern}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserAttributeUserValue operation.
     * @callback module:api/UserApi~setUserAttributeUserValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAttributeWithValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set User Attribute User Value
     * ### Store a custom value for a user attribute in a user&#39;s account settings.  Per-user user attribute values take precedence over group or default values.
     * @param {Number} userId Id of user
     * @param {Number} userAttributeId Id of user attribute
     * @param {module:model/UserAttributeWithValue} body New attribute value for user.
     * @param {module:api/UserApi~setUserAttributeUserValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAttributeWithValue}
     */
    this.setUserAttributeUserValue = function(userId, userAttributeId, body, callback) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setUserAttributeUserValue");
      }

      // verify the required parameter 'userAttributeId' is set
      if (userAttributeId === undefined || userAttributeId === null) {
        throw new Error("Missing the required parameter 'userAttributeId' when calling setUserAttributeUserValue");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setUserAttributeUserValue");
      }


      var pathParams = {
        'user_id': userId,
        'user_attribute_id': userAttributeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserAttributeWithValue;

      return this.apiClient.callApi(
        '/users/{user_id}/attribute_values/{user_attribute_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserRoles operation.
     * @callback module:api/UserApi~setUserRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set User Roles
     * ### Set roles of the user with a specific id.
     * @param {Number} userId id of user
     * @param {Array.<module:model/Number>} body array of roles ids for user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~setUserRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    this.setUserRoles = function(userId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setUserRoles");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setUserRoles");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Role];

      return this.apiClient.callApi(
        '/users/{user_id}/roles', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UserApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User
     * ### Update information about the user with a specific id.
     * @param {Number} userId Id of user
     * @param {module:model/User} body User
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.updateUser = function(userId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUser");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/{user_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserCredentialsEmail operation.
     * @callback module:api/UserApi~updateUserCredentialsEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Email/Password Credential
     * ### Email/password login information for the specified user.
     * @param {Number} userId id of user
     * @param {module:model/CredentialsEmail} body Email/Password Credential
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~updateUserCredentialsEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsEmail}
     */
    this.updateUserCredentialsEmail = function(userId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserCredentialsEmail");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateUserCredentialsEmail");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsEmail;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_email', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the user operation.
     * @callback module:api/UserApi~userCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User by Id
     * ### Get information about the user with a specific id.  If the caller is an admin or the caller is the user being specified, then full user information will be returned. Otherwise, a minimal &#39;public&#39; variant of the user information will be returned. This contains The user name and avatar url, but no sensitive information.
     * @param {Number} userId Id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~userCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.user = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling user");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/{user_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userAttributeUserValues operation.
     * @callback module:api/UserApi~userAttributeUserValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserAttributeWithValue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Attribute Values
     * ### Get user attribute values for a given user.  Returns the values of specified user attributes (or all user attributes) for a certain user.  A value for each user attribute is searched for in the following locations, in this order: 1. in the user&#39;s account information 1. in groups that the user is a member of 1. the default value of the user attribute  If more than one group has a value defined for a user attribute, the group with the lowest rank wins.  The response will only include user attributes for which values were found. Use &#x60;include_unset&#x3D;true&#x60; to include empty records for user attributes with no value.  The value of all hidden user attributes will be blank.
     * @param {Number} userId Id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {Array.<Number>} opts.userAttributeIds Specific user attributes to request. Omit or leave blank to request all user attributes.
     * @param {Boolean} opts.allValues If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence.
     * @param {Boolean} opts.includeUnset If true, returns an empty record for each requested attribute that has no user, group, or default value.
     * @param {module:api/UserApi~userAttributeUserValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserAttributeWithValue>}
     */
    this.userAttributeUserValues = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userAttributeUserValues");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
        'all_values': opts['allValues'],
        'include_unset': opts['includeUnset'],
      };
      var collectionQueryParams = {
        'user_attribute_ids': {
          value: opts['userAttributeIds'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [UserAttributeWithValue];

      return this.apiClient.callApi(
        '/users/{user_id}/attribute_values', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userCredentialsApi3 operation.
     * @callback module:api/UserApi~userCredentialsApi3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsApi3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get API 3 Credential
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param {Number} userId Id of user
     * @param {Number} credentialsApi3Id Id of API 3 Credential
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~userCredentialsApi3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsApi3}
     */
    this.userCredentialsApi3 = function(userId, credentialsApi3Id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userCredentialsApi3");
      }

      // verify the required parameter 'credentialsApi3Id' is set
      if (credentialsApi3Id === undefined || credentialsApi3Id === null) {
        throw new Error("Missing the required parameter 'credentialsApi3Id' when calling userCredentialsApi3");
      }


      var pathParams = {
        'user_id': userId,
        'credentials_api3_id': credentialsApi3Id
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsApi3;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_api3/{credentials_api3_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userCredentialsEmail operation.
     * @callback module:api/UserApi~userCredentialsEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Email/Password Credential
     * ### Email/password login information for the specified user.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~userCredentialsEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsEmail}
     */
    this.userCredentialsEmail = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userCredentialsEmail");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsEmail;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_email', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userCredentialsEmbed operation.
     * @callback module:api/UserApi~userCredentialsEmbedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsEmbed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Embedding Credential
     * ### Embed login information for the specified user.
     * @param {Number} userId Id of user
     * @param {Number} credentialsEmbedId Id of Embedding Credential
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~userCredentialsEmbedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsEmbed}
     */
    this.userCredentialsEmbed = function(userId, credentialsEmbedId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userCredentialsEmbed");
      }

      // verify the required parameter 'credentialsEmbedId' is set
      if (credentialsEmbedId === undefined || credentialsEmbedId === null) {
        throw new Error("Missing the required parameter 'credentialsEmbedId' when calling userCredentialsEmbed");
      }


      var pathParams = {
        'user_id': userId,
        'credentials_embed_id': credentialsEmbedId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsEmbed;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_embed/{credentials_embed_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userCredentialsGoogle operation.
     * @callback module:api/UserApi~userCredentialsGoogleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsGoogle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Google Auth Credential
     * ### Google authentication login information for the specified user.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~userCredentialsGoogleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsGoogle}
     */
    this.userCredentialsGoogle = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userCredentialsGoogle");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsGoogle;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_google', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userCredentialsLdap operation.
     * @callback module:api/UserApi~userCredentialsLdapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsLDAP} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get LDAP Credential
     * ### LDAP login information for the specified user.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~userCredentialsLdapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsLDAP}
     */
    this.userCredentialsLdap = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userCredentialsLdap");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsLDAP;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_ldap', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userCredentialsLookerOpenid operation.
     * @callback module:api/UserApi~userCredentialsLookerOpenidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsLookerOpenid} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Looker OpenId Credential
     * ### Looker Openid login information for the specified user. Used by Looker Analysts.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~userCredentialsLookerOpenidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsLookerOpenid}
     */
    this.userCredentialsLookerOpenid = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userCredentialsLookerOpenid");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsLookerOpenid;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_looker_openid', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userCredentialsOidc operation.
     * @callback module:api/UserApi~userCredentialsOidcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsOIDC} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get OIDC Auth Credential
     * ### OpenID Connect (OIDC) authentication login information for the specified user.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~userCredentialsOidcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsOIDC}
     */
    this.userCredentialsOidc = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userCredentialsOidc");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsOIDC;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_oidc', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userCredentialsSaml operation.
     * @callback module:api/UserApi~userCredentialsSamlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsSaml} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Saml Auth Credential
     * ### Saml authentication login information for the specified user.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~userCredentialsSamlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsSaml}
     */
    this.userCredentialsSaml = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userCredentialsSaml");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsSaml;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_saml', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userCredentialsTotp operation.
     * @callback module:api/UserApi~userCredentialsTotpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredentialsTotp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Two-Factor Credential
     * ### Two-factor login information for the specified user.
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~userCredentialsTotpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredentialsTotp}
     */
    this.userCredentialsTotp = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userCredentialsTotp");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialsTotp;

      return this.apiClient.callApi(
        '/users/{user_id}/credentials_totp', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userForCredential operation.
     * @callback module:api/UserApi~userForCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User by Credential Id
     * ### Get information about the user with a credential of given type with specific id.  This is used to do things like find users by their embed external_user_id. Or, find the user with a given api3 client_id, etc. The &#39;credential_type&#39; matchs the &#39;type&#39; name of the various credential types. It must be one of the values listed in the table below. The &#39;credential_id&#39; is your unique Id for the user and is specific to each type of credential.  An example using the Ruby sdk might look like:  &#x60;sdk.user_for_credential(&#39;embed&#39;, &#39;customer-4959425&#39;)&#x60;  This table shows the supported &#39;Credential Type&#39; strings. The right column is for reference; it shows which field in the given credential type is actually searched when finding a user with the supplied &#39;credential_id&#39;.  | Credential Types | Id Field Matched | | ---------------- | ---------------- | | email            | email            | | google           | google_user_id   | | saml             | saml_user_id     | | oidc             | oidc_user_id     | | ldap             | ldap_id          | | api              | token            | | api3             | client_id        | | embed            | external_user_id | | looker_openid    | email            |  NOTE: The &#39;api&#39; credential type was only used with the legacy Looker query API and is no longer supported. The credential type for API you are currently looking at is &#39;api3&#39;.
     * @param {String} credentialType Type name of credential
     * @param {String} credentialId Id of credential
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~userForCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.userForCredential = function(credentialType, credentialId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'credentialType' is set
      if (credentialType === undefined || credentialType === null) {
        throw new Error("Missing the required parameter 'credentialType' when calling userForCredential");
      }

      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling userForCredential");
      }


      var pathParams = {
        'credential_type': credentialType,
        'credential_id': credentialId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/credential/{credential_type}/{credential_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userRoles operation.
     * @callback module:api/UserApi~userRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Roles
     * ### Get information about roles of a given user
     * @param {Number} userId id of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {Boolean} opts.directAssociationOnly Get only roles associated directly with the user: exclude those only associated through groups.
     * @param {module:api/UserApi~userRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    this.userRoles = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userRoles");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'fields': opts['fields'],
        'direct_association_only': opts['directAssociationOnly'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Role];

      return this.apiClient.callApi(
        '/users/{user_id}/roles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userSession operation.
     * @callback module:api/UserApi~userSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Web Login Session
     * ### Web login session for the specified user.
     * @param {Number} userId Id of user
     * @param {Number} sessionId Id of Web Login Session
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Requested fields.
     * @param {module:api/UserApi~userSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.userSession = function(userId, sessionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userSession");
      }

      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling userSession");
      }


      var pathParams = {
        'user_id': userId,
        'session_id': sessionId
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/users/{user_id}/sessions/{session_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
