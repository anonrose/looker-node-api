/**
 * Looker API 3.1 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  This **API 3.1** is in active development. This is where support for new Looker features will appear as non-breaking additions - new functions, new optional parameters on existing functions, or new optional properties in existing types. Additive changes should not impact your existing application code that calls the Looker API. Your existing application code will not be aware of any new Looker API functionality until you choose to upgrade your app to use a newer Looker API client SDK release.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.   ### Examples of new things added in API 3.1:  * Dashboard construction APIs * Themes and custom color collections APIs * Create and run SQL_runner queries * Create and run merged results queries * Create and modify dashboard filters * Create and modify password requirements   ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.   ### Semantic changes in API 3.1:  * `all_looks` no longer includes soft-deleted looks, matching `all_dashboards` behavior. You can find soft-deleted looks using `search_looks` with the `deleted` param set to True. * `all_spaces` no longer includes duplicate items * `search_users` no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, `render_task_results` now returns HTTP status ***202 Accepted*** instead of HTTP status ***102 Processing*** * `all_running_queries` and `kill_query` functions have moved into the `Query` function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.  
 *
 * OpenAPI spec version: 3.1.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LookerApi31Reference);
  }
}(this, function(expect, LookerApi31Reference) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LookerApi31Reference.LookmlModelExploreField();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LookmlModelExploreField', function() {
    it('should create an instance of LookmlModelExploreField', function() {
      // uncomment below and update the code to test LookmlModelExploreField
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be.a(LookerApi31Reference.LookmlModelExploreField);
    });

    it('should have the property align (base name: "align")', function() {
      // uncomment below and update the code to test the property align
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property canFilter (base name: "can_filter")', function() {
      // uncomment below and update the code to test the property canFilter
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property defaultFilterValue (base name: "default_filter_value")', function() {
      // uncomment below and update the code to test the property defaultFilterValue
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property enumerations (base name: "enumerations")', function() {
      // uncomment below and update the code to test the property enumerations
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property error (base name: "error")', function() {
      // uncomment below and update the code to test the property error
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property fieldGroupLabel (base name: "field_group_label")', function() {
      // uncomment below and update the code to test the property fieldGroupLabel
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property fieldGroupVariant (base name: "field_group_variant")', function() {
      // uncomment below and update the code to test the property fieldGroupVariant
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property fillStyle (base name: "fill_style")', function() {
      // uncomment below and update the code to test the property fillStyle
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property fiscalMonthOffset (base name: "fiscal_month_offset")', function() {
      // uncomment below and update the code to test the property fiscalMonthOffset
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property hasAllowedValues (base name: "has_allowed_values")', function() {
      // uncomment below and update the code to test the property hasAllowedValues
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property hidden (base name: "hidden")', function() {
      // uncomment below and update the code to test the property hidden
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property isFilter (base name: "is_filter")', function() {
      // uncomment below and update the code to test the property isFilter
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property isFiscal (base name: "is_fiscal")', function() {
      // uncomment below and update the code to test the property isFiscal
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property isNumeric (base name: "is_numeric")', function() {
      // uncomment below and update the code to test the property isNumeric
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property isTimeframe (base name: "is_timeframe")', function() {
      // uncomment below and update the code to test the property isTimeframe
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property canTimeFilter (base name: "can_time_filter")', function() {
      // uncomment below and update the code to test the property canTimeFilter
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property timeInterval (base name: "time_interval")', function() {
      // uncomment below and update the code to test the property timeInterval
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property label (base name: "label")', function() {
      // uncomment below and update the code to test the property label
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property labelFromParameter (base name: "label_from_parameter")', function() {
      // uncomment below and update the code to test the property labelFromParameter
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property labelShort (base name: "label_short")', function() {
      // uncomment below and update the code to test the property labelShort
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property lookmlLink (base name: "lookml_link")', function() {
      // uncomment below and update the code to test the property lookmlLink
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property mapLayer (base name: "map_layer")', function() {
      // uncomment below and update the code to test the property mapLayer
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property measure (base name: "measure")', function() {
      // uncomment below and update the code to test the property measure
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property strictValueFormat (base name: "strict_value_format")', function() {
      // uncomment below and update the code to test the property strictValueFormat
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property parameter (base name: "parameter")', function() {
      // uncomment below and update the code to test the property parameter
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property permanent (base name: "permanent")', function() {
      // uncomment below and update the code to test the property permanent
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property primaryKey (base name: "primary_key")', function() {
      // uncomment below and update the code to test the property primaryKey
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property projectName (base name: "project_name")', function() {
      // uncomment below and update the code to test the property projectName
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property requiresRefreshOnSort (base name: "requires_refresh_on_sort")', function() {
      // uncomment below and update the code to test the property requiresRefreshOnSort
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property sortable (base name: "sortable")', function() {
      // uncomment below and update the code to test the property sortable
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property sourceFile (base name: "source_file")', function() {
      // uncomment below and update the code to test the property sourceFile
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property sourceFilePath (base name: "source_file_path")', function() {
      // uncomment below and update the code to test the property sourceFilePath
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property sql (base name: "sql")', function() {
      // uncomment below and update the code to test the property sql
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property sqlCase (base name: "sql_case")', function() {
      // uncomment below and update the code to test the property sqlCase
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property suggestDimension (base name: "suggest_dimension")', function() {
      // uncomment below and update the code to test the property suggestDimension
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property suggestExplore (base name: "suggest_explore")', function() {
      // uncomment below and update the code to test the property suggestExplore
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property suggestable (base name: "suggestable")', function() {
      // uncomment below and update the code to test the property suggestable
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property suggestions (base name: "suggestions")', function() {
      // uncomment below and update the code to test the property suggestions
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property userAttributeFilterTypes (base name: "user_attribute_filter_types")', function() {
      // uncomment below and update the code to test the property userAttributeFilterTypes
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property valueFormat (base name: "value_format")', function() {
      // uncomment below and update the code to test the property valueFormat
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property view (base name: "view")', function() {
      // uncomment below and update the code to test the property view
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property viewLabel (base name: "view_label")', function() {
      // uncomment below and update the code to test the property viewLabel
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property dynamic (base name: "dynamic")', function() {
      // uncomment below and update the code to test the property dynamic
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

    it('should have the property weekStartDay (base name: "week_start_day")', function() {
      // uncomment below and update the code to test the property weekStartDay
      //var instance = new LookerApi31Reference.LookmlModelExploreField();
      //expect(instance).to.be();
    });

  });

}));
